kind: Template
apiVersion: v1
metadata:
  name: elastic-deploy
  annotations:
    openshift.io/display-name: Elasticsearch Server
    description: Elasticsearch is a search engine based on the Lucene library. It provides a distributed, multitenant-capable full-text search engine with an HTTP web interface and schema-free JSON documents.
    tags: tno,elastic
parameters:
  - name: SOLUTION_NAME
    displayName: Solution Group Name
    description: The name of the solution (e.g tno).
    required: true
    value: "tno"
  - name: APP_NAME
    displayName: Application Name
    description: The name of the application (e.g. api-editor.dev).
    required: true
    value: "elastic"

  - name: PROJECT_NAMESPACE
    displayName: OpenShift Project Namespace
    description: The namespace of the OpenShift project containing the application.
    required: true
    value: "9b301c"
  - name: ENV_NAME
    displayName: Environment name
    description: The name for this environment [dev, test, prod]
    required: true
    value: "dev"

  - name: IMAGE
    displayName: Source Image
    description: The full path to the source image.
    required: true
    value: "docker.elastic.co/elasticsearch/elasticsearch"
  - name: IMAGE_TAG
    displayName: Source Image Tag
    description: The version tag of the source image.
    required: true
    value: "7.15.0"

  - name: HTTP_PORT
    displayName: HTTP Client Port
    description: The REST API port to communicate with the elastic.
    required: true
    value: "9200"
  - name: COM_PORT
    displayName: Node Communication Port
    description: The port nodes use to communicate with each other.
    required: true
    value: "9300"
  - name: ES_JAVA_OPTS
    displayName: HTTP Client Port
    description: The REST API port to communicate with the elastic.
    required: true
    value: "-Xms512m -Xmx512m"

  - name: STORAGE_CLASS
    displayName: The Storage Class Name
    description: The storage class name is the type of storage [netapp-file-standard, netapp-file-extended, netapp-file-backup, netapp-block-standard, netapp-block-extended]
    required: true
    value: "netapp-file-standard"
  - name: ACCESS_MODE
    displayName: The Storage Access Mode
    description: The storage access mode [ReadWriteOnce, ReadWriteMany]
    required: true
    value: "ReadWriteMany"
  - name: VOLUME_CAPACITY
    displayName: Persistent Volume Capacity
    description: Volume space available for data, e.g. 512Mi, 2Gi.
    required: true
    value: "2Gi"

  - name: REPLICAS
    displayName: REPLICAS
    description: The number of StatefulSet replicas to use.
    required: true
    value: "3"
  - name: CPU_REQUEST
    displayName: Requested Minimum Resources CPU Limit
    description: The requested minimum resources CPU limit (in cores) for this build.
    required: true
    value: 10m
  - name: CPU_LIMIT
    displayName: Resources CPU Limit
    description: The resources CPU limit (in cores) for this build.
    required: true
    value: 100m
  - name: MEMORY_REQUEST
    displayName: Requested Minimum Memory Limit
    description: Minimum requested amount of memory the container can use.
    required: true
    value: 500Mi
  - name: MEMORY_LIMIT
    displayName: Memory Limit
    description: Maximum amount of memory the container can use.
    required: true
    value: 2Gi

objects:
  # Expose the elastic port to the pod.
  - kind: Service
    apiVersion: v1
    metadata:
      name: ${SOLUTION_NAME}-${APP_NAME}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      annotations:
        description: Exposes the elastic server
      labels:
        name: ${SOLUTION_NAME}-${APP_NAME}
        solution: ${SOLUTION_NAME}
        app: ${APP_NAME}
        cluster: ${SOLUTION_NAME}-${APP_NAME}-cluster
    spec:
      type: ClusterIP
      sessionAffinity: None
      ports:
        - name: ${HTTP_PORT}-tcp
          protocol: TCP
          port: ${{HTTP_PORT}}
          targetPort: ${{HTTP_PORT}}
        - name: ${COM_PORT}-com
          protocol: TCP
          port: ${{COM_PORT}}
          targetPort: ${{COM_PORT}}
      selector:
        solution: ${SOLUTION_NAME}
        app: ${APP_NAME}
        statefulset: ${SOLUTION_NAME}-${APP_NAME}-cluster

  - kind: Service
    apiVersion: v1
    metadata:
      name: ${SOLUTION_NAME}-${APP_NAME}-headless
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      labels:
        name: ${SOLUTION_NAME}-${APP_NAME}-headless
        solution: ${SOLUTION_NAME}
        app: ${APP_NAME}
        cluster: ${SOLUTION_NAME}-${APP_NAME}-cluster
    spec:
      clusterIP: None
      ports:
        - name: ${HTTP_PORT}-tcp
          protocol: TCP
          port: ${{HTTP_PORT}}
          targetPort: ${{HTTP_PORT}}
        - name: ${COM_PORT}-com
          protocol: TCP
          port: ${{COM_PORT}}
          targetPort: ${{COM_PORT}}
      selector:
        solution: ${SOLUTION_NAME}
        app: ${APP_NAME}
        statefulset: ${SOLUTION_NAME}-${APP_NAME}-cluster

  - apiVersion: apps/v1
    kind: StatefulSet
    metadata:
      name: ${SOLUTION_NAME}-${APP_NAME}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      annotations:
        description: Deploy Elasticsearch cluster
      labels:
        name: ${SOLUTION_NAME}-${APP_NAME}
        solution: ${SOLUTION_NAME}
        app: ${APP_NAME}
        cluster: ${SOLUTION_NAME}-${APP_NAME}-cluster
    spec:
      serviceName: ${SOLUTION_NAME}-${APP_NAME}-headless
      replicas: ${{REPLICAS}}
      podManagementPolicy: Parallel
      updateStrategy:
        type: RollingUpdate
      selector:
        matchLabels:
          statefulset: ${SOLUTION_NAME}-${APP_NAME}-cluster
      template:
        metadata:
          labels:
            solution: ${SOLUTION_NAME}
            app: ${APP_NAME}
            statefulset: ${SOLUTION_NAME}-${APP_NAME}-cluster
        spec:
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          serviceAccountName: ${SOLUTION_NAME}
          terminationGracePeriodSeconds: 0
          affinity:
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchExpressions:
                      - key: statefulset
                        operator: In
                        values:
                          - ${SOLUTION_NAME}-${APP_NAME}-cluster
                  topologyKey: "kubernetes.io/hostname"
          volumes:
            - name: backup
              persistentVolumeClaim:
                claimName: ${SOLUTION_NAME}-database-backup
          containers:
            - name: ${SOLUTION_NAME}-${APP_NAME}
              image: ${IMAGE}:${IMAGE_TAG}
              resources:
                limits:
                  cpu: ${CPU_LIMIT}
                  memory: ${MEMORY_LIMIT}
                requests:
                  cpu: ${CPU_REQUEST}
                  memory: ${MEMORY_REQUEST}
              ports:
                - containerPort: ${{HTTP_PORT}}
                  name: ${HTTP_PORT}-tcp
                  protocol: TCP
                - containerPort: ${{COM_PORT}}
                  name: ${COM_PORT}-com
                  protocol: TCP
              volumeMounts:
                - name: data
                  mountPath: /usr/share/elasticsearch/data
                - name: backup
                  mountPath: /backups
              env:
                - name: cluster.name
                  value: ${SOLUTION_NAME}-${APP_NAME}
                - name: node.name
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.name
                - name: cluster.initial_master_nodes
                  value: "${SOLUTION_NAME}-${APP_NAME}-0,${SOLUTION_NAME}-${APP_NAME}-1,${SOLUTION_NAME}-${APP_NAME}-2"
                - name: discovery.seed_hosts
                  value: "${SOLUTION_NAME}-${APP_NAME}-headless"
                - name: network.host
                  value: "0.0.0.0"
                - name: node.data
                  value: "true"
                - name: node.ingest
                  value: "true"
                - name: node.master
                  value: "true"
                # - name: discovery.zen.ping.unicast.hosts
                #   value: "${SOLUTION_NAME}-${APP_NAME}-0.${SOLUTION_NAME}-${APP_NAME},${SOLUTION_NAME}-${APP_NAME}-1.${SOLUTION_NAME}-${APP_NAME},${SOLUTION_NAME}-${APP_NAME}-2.${SOLUTION_NAME}-${APP_NAME}"
                # - name: discovery.zen.minimum_master_nodes
                #   value: "2"
                - name: ELASTIC_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${SOLUTION_NAME}-${APP_NAME}
                      key: ELASTIC_PASSWORD
                - name: ES_JAVA_OPTS
                  value: ${ES_JAVA_OPTS}
      volumeClaimTemplates:
        - metadata:
            name: data
            labels:
              solution: ${SOLUTION_NAME}
              app: ${APP_NAME}
          spec:
            accessModes:
              - ${ACCESS_MODE}
            storageClassName: ${STORAGE_CLASS}
            resources:
              requests:
                storage:  ${VOLUME_CAPACITY}
