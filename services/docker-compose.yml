version: '3.5'

services:
  ####################### Ingestion Services #######################
  syndication:
    image: tno:syndication
    profiles:
      - service
    restart: "no"
    container_name: tno-syndication
    build:
      context: ./
      dockerfile: services/net/syndication/Dockerfile
    env_file:
      - services/net/syndication/.env
    ports:
      - ${SYNDICATION_PORT:-40020}:8081
    depends_on:
      - api
      - broker
    networks:
      - tno
    healthcheck:
      test: curl -s -f http://localhost:8081/health || exit 1
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s

  capture:
    image: tno:capture
    profiles:
      - service
    restart: "no"
    container_name: tno-capture
    build:
      context: ./
      dockerfile: services/net/capture/Dockerfile
    env_file:
      - services/net/capture/.env
    ports:
      - ${CAPTURE_PORT:-40024}:8081
    depends_on:
      - api
      - broker
    networks:
      - tno
    volumes:
      - tno-av-data:/data
    healthcheck:
      test: curl -s -f http://localhost:8081/health || exit 1
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s

  clip:
    image: tno:clip
    profiles:
      - service
    restart: "no"
    container_name: tno-clip
    build:
      context: ./
      dockerfile: services/net/clip/Dockerfile
    env_file:
      - services/net/clip/.env
    ports:
      - ${CLIP_PORT:-40025}:8081
    depends_on:
      - api
      - broker
    networks:
      - tno
    volumes:
      - tno-av-data:/data
    healthcheck:
      test: curl -s -f http://localhost:8081/health || exit 1
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s

  image:
    image: tno:image
    profiles:
      - service
    restart: "no"
    container_name: tno-image
    build:
      context: ./
      dockerfile: services/net/image/Dockerfile
    env_file:
      - services/net/image/.env
    ports:
      - ${IMAGE_PORT:-40027}:8081
    depends_on:
      - api
      - broker
    networks:
      - tno
    volumes:
      - tno-av-data:/data
    healthcheck:
      test: curl -s -f http://localhost:8081/health || exit 1
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s

  content:
    image: tno:content
    profiles:
      - service
    restart: "no"
    container_name: tno-content
    build:
      context: ./
      dockerfile: services/net/content/Dockerfile
    env_file:
      - services/net/content/.env
    ports:
      - ${CONTENT_PORT:-40026}:8081
    depends_on:
      - api
      - broker
    networks:
      - tno
    volumes:
      - tno-av-data:/data
    healthcheck:
      test: curl -s -f http://localhost:8081/health || exit 1
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s

  transcription:
    image: tno:transcription
    profiles:
      - service
    restart: "no"
    container_name: tno-transcription
    build:
      context: ./
      dockerfile: services/net/transcription/Dockerfile
    env_file:
      - services/net/transcription/.env
    ports:
      - ${TRANSCRIPTION_PORT:-40028}:8081
    depends_on:
      - api
      - broker
    networks:
      - tno
    volumes:
      - tno-av-data:/data
    healthcheck:
      test: curl -s -f http://localhost:8081/health || exit 1
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s

  indexing:
    image: tno:indexing
    profiles:
      - service
    restart: "no"
    container_name: tno-indexing
    build:
      context: ./
      dockerfile: services/net/indexing/Dockerfile
    env_file:
      - services/net/indexing/.env
    ports:
      - ${INDEXING_PORT:-40023}:8080
    depends_on:
      - api
      - elastic
      - broker
    networks:
      - tno
    healthcheck:
      test: curl -s -f http://localhost:8080/health || exit 1
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s

  # nlp:
  #   image: tno:nlp
  #   profiles:
  #     - service
  #   restart: "no"
  #   container_name: tno-nlp
  #   build:
  #     context: services/java/nlp
  #   env_file:
  #     - services/java/nlp/.env
  #   ports:
  #     - ${NLP_PORT:-40022}:8080
  #   volumes:
  #     - ./services/java/nlp/src/main/resources/models:/app/classes/models
  #   depends_on:
  #     - database
  #   networks:
  #     - tno
  #   healthcheck:
  #     test: curl -s -f http://localhost:8080/health || exit 1
  #     interval: 1m
  #     timeout: 10s
  #     retries: 3
  #     start_period: 30s
