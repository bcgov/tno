apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    tekton.dev/displayName: openshift client
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/tags: cli
  name: oc-build-with-template
  labels:
    app.kubernetes.io/version: "0.1"
    operator.tekton.dev/provider-type: redhat
spec:
  description: >-
    This task processes the specified template to generate a BuildConfig.
    It will then use this BuildConfig to build an image.
  params:
    - name: TEMPLATE_NAME
      description: The BuildConfig Template name that will be used to generate a BuildConfig.
      type: string
    - name: SOLUTION_NAME
      description: The solution name to label all objects with.
      type: string
      default: tno
    - name: APP_NAME
      description: The name of the application.
      type: string

    - name: GIT_URL
      description: The URL of the repository with your application source code.
      type: string
      default: https://github.com/bcgov/tno.git
    - name: GIT_REF
      description:
        "Set this to a branch name, tag or other ref of your repository if you
        are not using the default branch."
      type: string
      default: "dev"
    - name: CONTEXT_DIR
      description: Set this to use a subdirectory of the source code repository
      type: string
      default: ""
    - name: DOCKERFILE
      description: The Dockerfile name
      type: string
      default: Dockerfile

    - name: IMAGE_NAME
      description: The name given to the built image.
      type: string
    - name: IMAGE_TAG
      description: The tag given to the built image.
      type: string
      default: latest

    - name: CPU_LIMIT
      description: The resources CPU limit (in cores) for this build.
      default: 2000m
    - name: MEMORY_LIMIT
      description: Maximum amount of memory the container can use.
      default: 2Gi
  steps:
    - name: create-build-config
      image: "image-registry.openshift-image-registry.svc:5000/openshift/cli:latest"
      resources: {}
      script: |
        # Create build.env file
        cat <<EOF > build.env
        SOLUTION_NAME=$(params.SOLUTION_NAME)
        APP_NAME=$(params.APP_NAME)
        GIT_URL=$(params.GIT_URL)
        GIT_REF=$(params.GIT_REF)
        CONTEXT_DIR=$(params.CONTEXT_DIR)
        DOCKERFILE=$(params.DOCKERFILE)
        IMAGE_NAME=$(params.IMAGE_NAME)
        IMAGE_TAG=$(params.IMAGE_TAG)
        CPU_LIMIT=$(params.CPU_LIMIT)
        MEMORY_LIMIT=$(params.MEMORY_LIMIT)
        EOF

        # Create the objects in the Template.
        oc get templates $(params.TEMPLATE_NAME) -o yaml > build.yaml
        oc process -f build.yaml --param-file=build.env | oc apply -f -

    - name: build
      image: "image-registry.openshift-image-registry.svc:5000/openshift/cli:latest"
      resources: {}
      script: |
        oc start-build $(params.SOLUTION_NAME)-$(params.APP_NAME) --follow --wait

        if [ "$(params.IMAGE_NAME)" != "latest" ]; then
          oc tag $(params.IMAGE_NAME):$(params.IMAGE_TAG) $(params.IMAGE_NAME):latest
        fi
