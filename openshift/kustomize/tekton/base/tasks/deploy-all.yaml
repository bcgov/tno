apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy-all
  annotations:
    tekton.dev/displayName: openshift client
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/tags: cli
    description: >-
      This task will tag a specific image with the environment name.
      This will deploy the image if there is a DeployConfig trigger listening for the environment tag.
  labels:
    name: oc-all
    part-of: tno
    version: 1.0.0
    component: task
    managed-by: kustomize
spec:
  params:
    - name: PROJECT_SHORTNAME
      description: The project namespace.
      type: string
      default: 9b301c
    - name: IMAGE_TAG
      description: The tag given to the built image.
      type: string
      default: latest
    - name: ENV
      description: The environment to deploy to.
      type: string
    - name: TIMEOUT
      description: The timeout before it will stop waiting for the pod to become available.
      type: string
      default: "600s"

    - name: DEPLOY
      description: Whether to deploy a component, or all [*|all|[name]].
      default: "*"
  workspaces:
    - name: conditions
      mountPath: /data

  steps:
    - name: deploy
      image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
      resources: {}
      script: |
        # set -xe

        # Place config into environment variables.
        if test -f $(workspaces.conditions.path)/build.env; then
          export $(grep -v '^#' $(workspaces.conditions.path)/build.env | xargs)
        else
          echo 'Workspace conditions build.env not found'
          exit 1;
        fi

        # ***************************************************
        # An array of all the objects for the solution.
        # ***************************************************

        # Applications

        declare -A COMPONENT0=(
          [id]="api"
          [name]="api"
          [type]="sts"
          [replicas]="1"
          [action]="maintenance"
          [build]="yes"
          [env]="dev test prod"
        )

        declare -A COMPONENT1=(
          [id]="charts-api"
          [name]="charts-api"
          [type]="dc"
          [replicas]="1"
          [action]="maintenance"
          [build]="yes"
          [env]="dev test prod"
        )

        declare -A COMPONENT2=(
          [id]="editor"
          [name]="editor"
          [type]="dc"
          [replicas]="1"
          [action]="maintenance"
          [build]="yes"
          [env]="dev test prod"
        )

        declare -A COMPONENT3=(
          [id]="subscriber"
          [name]="subscriber"
          [type]="dc"
          [replicas]="1"
          [action]="maintenance"
          [build]="yes"
          [env]="dev test prod"
        )

        # Processing Services

        declare -A COMPONENT4=(
          [id]="content"
          [name]="content-service"
          [type]="dc"
          [replicas]="2"
          [action]="stop"
          [build]="yes"
          [env]="dev test prod"
        )

        declare -A COMPONENT5=(
          [id]="content"
          [name]="content-tno-service"
          [type]="dc"
          [replicas]="1"
          [action]="stop"
          [build]="no"
          [env]="dev test prod"
        )

        declare -A COMPONENT6=(
          [id]="indexing"
          [name]="indexing-service"
          [type]="dc"
          [replicas]="2"
          [action]="stop"
          [build]="yes"
          [env]="dev test prod"
        )

        declare -A COMPONENT7=(
          [id]="transcription"
          [name]="transcription-service"
          [type]="dc"
          [replicas]="2"
          [action]="stop"
          [build]="yes"
          [env]="dev test prod"
        )

        declare -A COMPONENT8=(
          [id]="nlp"
          [name]="nlp-service"
          [type]="dc"
          [replicas]="1"
          [action]="stop"
          [build]="yes"
          [env]="dev test prod"
        )

        declare -A COMPONENT9=(
          [id]="filecopy"
          [name]="filecopy-service"
          [type]="dc"
          [replicas]="1"
          [action]="stop"
          [build]="yes"
          [env]="dev test prod"
        )

        declare -A COMPONENT10=(
          [id]="reporting"
          [name]="reporting-service"
          [type]="dc"
          [replicas]="1"
          [action]="stop"
          [build]="yes"
          [env]="dev test prod"
        )

        declare -A COMPONENT11=(
          [id]="notification"
          [name]="notification-service"
          [type]="dc"
          [replicas]="1"
          [action]="stop"
          [build]="yes"
          [env]="dev test prod"
        )

        declare -A COMPONENT12=(
          [id]="scheduler"
          [name]="scheduler-service"
          [type]="dc"
          [replicas]="1"
          [action]="stop"
          [build]="yes"
          [env]="dev test prod"
        )

        declare -A COMPONENT13=(
          [id]="foldercollection"
          [name]="folder-collection-service"
          [type]="dc"
          [replicas]="1"
          [action]="stop"
          [build]="yes"
          [env]="dev test prod"
        )

        declare -A COMPONENT14=(
          [id]="ffmpeg"
          [name]="ffmpeg-service"
          [type]="dc"
          [replicas]="1"
          [action]="stop"
          [build]="yes"
          [env]="dev test prod"
        )

        # Ingest Services

        declare -A COMPONENT15=(
          [id]="syndication"
          [name]="syndication-service"
          [type]="dc"
          [replicas]="1"
          [action]="stop"
          [build]="yes"
          [env]="dev test prod"
        )

        declare -A COMPONENT16=(
          [id]="filemonitor"
          [name]="filemonitor-service"
          [type]="dc"
          [replicas]="1"
          [action]="stop"
          [build]="yes"
          [env]="dev test prod"
        )

        declare -A COMPONENT17=(
          [id]="image"
          [name]="image-service"
          [type]="dc"
          [replicas]="1"
          [action]="stop"
          [build]="yes"
          [env]="dev test prod"
        )

        declare -A COMPONENT18=(
          [id]="capture"
          [name]="capture-service"
          [type]="dc"
          [replicas]="0"
          [action]="stop"
          [build]="yes"
          [env]="dev test prod"
        )

        declare -A COMPONENT19=(
          [id]="clip"
          [name]="clip-service"
          [type]="dc"
          [replicas]="0"
          [action]="stop"
          [build]="yes"
          [env]="dev test prod"
        )

        declare -A COMPONENT20=(
          [id]="contentmigration"
          [name]="contentmigration-service"
          [type]="dc"
          [replicas]="1"
          [action]="stop"
          [build]="yes"
          [env]="dev test prod"
        )

        declare -A COMPONENT21=(
          [id]="contentmigration"
          [name]="contentmigration-service-historic"
          [type]="dc"
          [replicas]="1"
          [action]="stop"
          [build]="no"
          [env]="dev"
        )

        declare -n component;

        # ***************************************************
        # Work
        # ***************************************************

        # Stop all services if API needs to be deployed.
        # If the component was auto built by the build step, or all components are to built, or a specific component was requested to be built.
        if [ "${BUILD_API}" = true ] || [ "$(params.DEPLOY)" = "api" ] || [ "$(params.DEPLOY)" = "all" ]; then
          for component in ${!COMPONENT@}; do
            environments=(${component[env]})
            if [[ "${component[action]}" = "stop" ]] && [[ $environments =~ "$(params.ENV)" ]]; then
              echo "Stopping ${component[id]}"
              oc scale ${component[type]} ${component[name]} -n $(params.PROJECT_SHORTNAME)-$(params.ENV) --replicas=0
            fi
          done
        fi

        # Loop through each component and deploy if required.
        for component in ${!COMPONENT@}; do
          # Dynamic variable to control what will be built.
          TVAR="BUILD_${component[id]}"
          COMPONENT=${TVAR//\-/_}
          COMPONENT=${COMPONENT^^}
          echo $COMPONENT=${!COMPONENT}

          environments=(${component[env]})

          # Check if this image needs to be deployed.
          # If the component was auto built by the build step, or all components are to built, or a specific component was requested to be built.
          if [ "${!COMPONENT}" = true ] || [ "$(params.DEPLOY)" = "all" ] || [ "$(params.DEPLOY)" = "${component[id]}" ]; then
            if [[ "$environments" =~ "$(params.ENV)" ]]; then
              if [[ "${component[build]}" = "yes" ]]; then
                echo "Tagging image to trigger deployment to ${component[name]}:$(params.ENV)"
                oc tag ${component[name]}:$(params.IMAGE_TAG) ${component[name]}:$(params.ENV)
              fi

              if [ "${component[type]}" = "sts" ]; then
                oc rollout restart ${component[type]}/${component[name]} -n $(params.PROJECT_SHORTNAME)-$(params.ENV)
              fi

              echo "Waiting for deployment to roll out"
              oc rollout status --watch --timeout=$(params.TIMEOUT) ${component[type]}/${component[name]} -n $(params.PROJECT_SHORTNAME)-$(params.ENV)
            fi
          fi
        done

        # Start all services if API was deployed.
        if [ "${BUILD_API}" = true ] || [ "$(params.DEPLOY)" = "api" ] || [ "$(params.DEPLOY)" = "all" ]; then
          for component in ${!COMPONENT@}; do
            environments=(${component[env]})
            if [[ "${component[action]}" = "stop" ]] && [[ $environments =~ "$(params.ENV)" ]]; then
              echo "Starting ${component[name]}"

              if [ "${component[replicas]}" -gt "0" ]; then
                oc scale ${component[type]} ${component[name]} -n $(params.PROJECT_SHORTNAME)-$(params.ENV) --replicas=${component[replicas]}
                oc wait --for=condition=available --timeout=$(params.TIMEOUT) ${component[type]}/${component[name]} -n $(params.PROJECT_SHORTNAME)-$(params.ENV)
                # oc rollout status --watch --timeout=$(params.TIMEOUT) ${component[type]}/${component[name]} -n $(params.PROJECT_SHORTNAME)-$(params.ENV)
              fi
            fi
          done
        fi
