---
# How the app will be deployed to the pod.
kind: DeploymentConfig
apiVersion: apps.openshift.io/v1
metadata:
  name: kafka-rest-proxy
  namespace: default
  annotations:
    description: Defines how to deploy kafka-rest-proxy
  labels:
    name: kafka-rest-proxy
    part-of: tno
    version: 1.0.0
    component: kafka-rest-proxy
    managed-by: kustomize
    created-by: jeremy.foster
spec:
  replicas: 3
  selector:
    name: kafka-rest-proxy
    part-of: tno
    component: kafka-rest-proxy
  strategy:
    rollingParams:
      intervalSeconds: 1
      maxSurge: 25%
      maxUnavailable: 25%
      timeoutSeconds: 600
      updatePeriodSeconds: 1
    type: Rolling
  triggers:
    - type: ConfigChange
  template:
    metadata:
      name: kafka-rest-proxy
      labels:
        name: kafka-rest-proxy
        part-of: tno
        component: kafka-rest-proxy
    spec:
      containers:
        - name: kafka-rest-proxy
          image: confluentinc/cp-kafka-rest:7.1.1
          imagePullPolicy: Always
          ports:
            - containerPort: 8082
              protocol: TCP
          resources:
            requests:
              cpu: 10m
              memory: 250Mi
            limits:
              cpu: 50m
              memory: 350Mi
          env:
            - name: KAFKA_REST_HOST_NAME
              value: kafka-rest-proxy
            - name: KAFKA_REST_BOOTSTRAP_SERVERS
              value: kafka-headless:29092
            - name: KAFKA_REST_LISTENERS
              value: http://0.0.0.0:8082
            # - name: KAFKA_REST_SCHEMA_REGISTRY_URL
            #   value: http://tno-schema-registry:8081
          # livenessProbe:
          #   httpGet:
          #     path: '/health'
          #     port: 8082
          #     scheme: HTTP
          #   initialDelaySeconds: 30
          #   timeoutSeconds: 60
          #   periodSeconds: 10
          #   successThreshold: 1
          #   failureThreshold: 3
          # readinessProbe:
          #   httpGet:
          #     path: '/health'
          #     port: 8082
          #     scheme: HTTP
          #   initialDelaySeconds: 10
          #   timeoutSeconds: 60
          #   periodSeconds: 10
          #   successThreshold: 1
          #   failureThreshold: 3
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      securityContext: {}
      terminationGracePeriodSeconds: 30
