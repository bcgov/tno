kind: Template
apiVersion: template.openshift.io/v1
metadata:
  name: git-triggered-pipeline
  annotations:
    openshift.io/display-name: GIT Triggered Pipeline
    description: Listen for a GIT merge event to trigger a pipeline run.
    tags: git,trigger,tekton

parameters:
  - name: APP_NAME
    displayName: Application Name
    description: The name of the application.
    required: true
    value: editor

  - name: GIT_SOURCE
    displayName: Git Source Name
    description: Identify the git source.
    required: true
    value: dev

  - name: CONTEXT_DIR
    displayName: Context Directory
    description: Set this to use a subdirectory of the source code repository
    value: app/editor

objects:
  # The GIT push event will generate a pipeline run.
  - apiVersion: triggers.tekton.dev/v1alpha1
    kind: EventListener
    metadata:
      name: git-${APP_NAME}
      component: ${APP_NAME}
    spec:
      serviceAccountName: pipeline
      triggers:
        - name: github-listener
          interceptors:
            - github:
                secretRef:
                  secretName: tno-webhook
                  secretKey: webhook
                eventTypes:
                  - push
            - cel:
                filter: >-
                  body.ref == 'refs/heads/dev'
                  && body.commits.exists(c, c.added.exists(m, m.startsWith('${CONTEXT_DIR}')))
                    || body.commits.exists(c, c.modified.exists(m, m.startsWith('${CONTEXT_DIR}')))
                    || body.commits.exists(c, c.removed.exists(m, m.startsWith('${CONTEXT_DIR}')))
                    || body.head_commit.added.exists(m, m.startsWith('${CONTEXT_DIR}'))
                    || body.head_commit.modified.exists(m, m.startsWith('${CONTEXT_DIR}'))
                    || body.head_commit.removed.exists(m, m.startsWith('${CONTEXT_DIR}'))
          bindings:
            - ref: git-${GIT_SOURCE}
          template:
            ref: git-${APP_NAME}
