apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: oc-db-migration
  annotations:
    tekton.dev/displayName: openshift client
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/tags: cli
  labels:
    app.kubernetes.io/version: "0.1"
    operator.tekton.dev/provider-type: redhat
spec:
  description: >-
    This task processes the specified template to generate a Job.
  params:
    - name: SOLUTION_NAME
      description: The solution name to label all objects with.
      type: string
      default: tno
    - name: APP_NAME
      description: The name of the application.
      type: string
      default: db-migration

    - name: PROJECT_NAMESPACE
      description: The project namespace
      type: string
      default: 9b301c
    - name: DEPLOY_TO
      description: Environment to deploy to [dev, test, prod, tools]
      type: string
      default: dev

    - name: TEMPLATE_NAME
      description: The BuildConfig Template name that will be used to generate a BuildConfig.
      type: string
      default: postgres-db-migration

    - name: IMAGE_TAG
      description: The tag given to the built image.
      type: string
      default: latest

    - name: DB_SERVICE_NAME
      description: The database service name that will be used to communicate with the database.
      type: string
      default: tno-database
    - name: DB_URL
      description: Flyway URL configuration setting.
      type: string
      default: jdbc:postgresql://tno-database:5432/tno
    - name: DB_SCHEMAS
      description: Flyway schemas configuration setting.
      type: string
      default: public

    - name: TIMEOUT
      description: The timeout before it will stop waiting for the pod to become available.
      type: string
      default: 60s

    - name: CPU_REQUEST
      description: The requested minimum resources CPU limit (in cores) for this build.
      default: 100m
    - name: CPU_LIMIT
      description: The resources CPU limit (in cores) for this build.
      default: 2000m
    - name: MEMORY_REQUEST
      description: Minimum requested amount of memory the container can use.
      default: 50Mi
    - name: MEMORY_LIMIT
      description: Maximum amount of memory the container can use.
      default: 2Gi
  steps:
    - name: create-job
      image: "image-registry.openshift-image-registry.svc:5000/openshift/cli:latest"
      resources: {}
      script: |
        # Create deploy.env file
        cat <<EOF > deploy.env
        SOLUTION_NAME=$(params.SOLUTION_NAME)
        APP_NAME=$(params.APP_NAME)
        PROJECT_NAMESPACE=$(params.PROJECT_NAMESPACE)
        ENV_NAME=$(params.DEPLOY_TO)
        IMAGE_TAG=$(params.IMAGE_TAG)

        DB_SERVICE_NAME=$(params.DB_SERVICE_NAME)
        DB_URL=$(params.DB_URL)
        DB_SCHEMAS=$(params.DB_SCHEMAS)

        CPU_REQUEST=$(params.CPU_REQUEST)
        CPU_LIMIT=$(params.CPU_LIMIT)
        MEMORY_REQUEST=$(params.MEMORY_REQUEST)
        MEMORY_LIMIT=$(params.MEMORY_LIMIT)
        EOF

        # Delete existing job with same name.
        echo "Deleting any existing job '$(params.SOLUTION_NAME)-$(params.APP_NAME)-$(params.IMAGE_TAG)'"
        oc delete job --selector name=$(params.SOLUTION_NAME)-$(params.APP_NAME)-$(params.IMAGE_TAG) -n $(params.PROJECT_NAMESPACE)-$(params.DEPLOY_TO)

        # Create the objects in the Template.
        oc get templates $(params.TEMPLATE_NAME) -o yaml > deploy.yaml
        oc process -f deploy.yaml --param-file=deploy.env | oc create -f -

        echo "Waiting for job to complete"
        oc wait --for=condition=complete --timeout=$(params.TIMEOUT) jobs/$(params.SOLUTION_NAME)-$(params.APP_NAME)-$(params.IMAGE_TAG) -n $(params.PROJECT_NAMESPACE)-$(params.DEPLOY_TO)
