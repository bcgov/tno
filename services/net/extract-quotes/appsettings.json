{
  "BaseUrl": "/",
  "Logging": {
    "Console": {
      "DisableColors": true
    },
    "LogLevel": {
      "Default": "Warning",
      "Microsoft": "Error",
      "TNO": "Information"
    }
  },
  "AllowedHosts": "*",
  "Service": {
    "MaxFailLimit": 5,
    "ApiUrl": "http://api:8080",
    "TimeZone": "Pacific Standard Time",
    "Topics": "index",
    "SendEmailOnFailure": true,
    "UseLLM": false,
    "QuoteExtractionPromptTemplate":"Task: Extract all direct quotes from the provided text.\nIdentify the speaker for each quote. Use 'Unknown' if the speaker is not explicitly mentioned.\n\nExisting Quotes (DO NOT include these or similar quotes in your response):\n----------\n{ExistingQuotes}\n----------\n\nInput Text:\n----------\n{InputText}\n----------\n\nOutput Format: Return the result strictly in the following JSON format. Ensure the entire output is valid JSON according to RFC 8259.\n```json\n{\n  \"quotes\": [\n    {\n      \"id\": 1, // Sequential integer ID for each quote\n      \"text\": \"The exact quote text, including surrounding quotation marks if present in the original text.\",\n      \"canonicalSpeaker\": \"The identified speaker's name (or 'Unknown')\",\n      \"beginSentence\": 0 // Placeholder, can be always 0\n    }\n    // ... more quote objects\n  ]\n}\n```\n\nCRITICAL JSON FORMATTING RULES (Strict adherence required):\n1.  The entire output MUST be a single, valid JSON object.\n2.  JSON Strings (values for \"text\" and \"canonicalSpeaker\"):\n    *   ONLY escape double quotes (\") as \\\" and backslashes (\\) as \\\\.\n    *   DO NOT escape single quotes ('). For example, 'it's' must appear as \"it's\" in the JSON string, NOT \"it\\'s\". The sequence \\' is INVALID in standard JSON strings.\n    *   Preserve all original punctuation and capitalization within the quote text.\n3.  Do not include trailing commas in JSON arrays or objects.\n4.  Use only double quotes (\") for all JSON keys and string values.\n5.  If no quotes are found in the text, return an empty array like this: { \"quotes\": [] }.\n6.  Ensure if you find a spearker has full name, always keep using the spearker's full name.",
    "PrimaryApiKeys": "PLACEHOLDER_PRIMARY_KEY_1;PLACEHOLDER_PRIMARY_KEY_2",
    "PrimaryModelName": "PLACEHOLDER_PRIMARY_MODEL",
    "PrimaryApiUrl": "PLACEHOLDER_PRIMARY_URL",
    "FallbackApiKeys": "PLACEHOLDER_FALLBACK_KEY_1;PLACEHOLDER_FALLBACK_KEY_2",
    "FallbackModelName": "PLACEHOLDER_FALLBACK_MODEL",
    "FallbackApiUrl": "PLACEHOLDER_FALLBACK_URL",
    "MaxRequestsPerMinute": 10
  },
  "CHES": {
    "AuthUrl": "https://loginproxy.gov.bc.ca/auth/realms/comsvcauth/protocol/openid-connect/token",
    "HostUri": "https://ches.api.gov.bc.ca/api/v1",
    "From": "Media Monitoring Insights <mmi@gov.bc.ca>",
    "EmailEnabled": true,
    "EmailAuthorized": false
  },
  "Auth": {
    "Keycloak": {
      "Authority": "https://loginproxy.gov.bc.ca/auth",
      "Audience": "mmi-service-account",
      "Secret": "{DO NOT STORE SECRET HERE}"
    },
    "OIDC": {
      "Token": "/realms/mmi/protocol/openid-connect/token"
    }
  },
  "Serialization": {
    "Json": {
      "PropertyNamingPolicy": "CamelCase",
      "PropertyNameCaseInsensitive": true,
      "DefaultIgnoreCondition": "WhenWritingNull",
      "WriteIndented": true
    }
  },
  "Kafka": {
    "Consumer": {
      "GroupId": "ExtractQuotes",
      "BootstrapServers": "kafka-broker-0.kafka-headless:9092,kafka-broker-1.kafka-headless:9092,kafka-broker-2.kafka-headless:9092",
      "AutoOffsetReset": "Latest",
      "MaxInFlight": 5,
      "EnableAutoCommit": false,
      "MaxThreads": 1
    }
  }
}
