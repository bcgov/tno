apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    tekton.dev/pipelines.minVersion: "0.19"
    tekton.dev/tags: image-build
  name: buildah
  labels:
    app.kubernetes.io/version: "0.1"
    operator.tekton.dev/provider-type: redhat
spec:
  description: >-
    Buildah task builds source into a container image and then pushes it to a
    container registry.

    Buildah Task builds source into a container image using Project Atomic's
    Buildah build tool.It uses Buildah's support for building from Dockerfiles,
    using its buildah bud command.This command executes the directives in the
    Dockerfile to assemble a container image, then pushes that image to a
    container registry.
  params:
    - name: IMAGE_NAME
      description: Reference of the image buildah will produce.
      type: string
    - name: IMAGE_TAG
      description: Tag to apply to the image
      default: latest
      type: string
    - name: IMAGE_REGISTRY
      description: Domain name of image registry.
      default: docker://
      type: string
    - name: BUILDER_IMAGE
      default: >-
        registry.redhat.io/rhel8/buildah@sha256:6a68ece207bc5fd8db2dd5cc2d0b53136236fb5178eb5b71eebe5d07a3c33d13
      description: The location of the buildah builder image.
      type: string
    - name: STORAGE_DRIVER
      default: vfs
      description: Set buildah storage driver
      type: string
    - name: DOCKERFILE
      default: ./Dockerfile
      description: Path to the Dockerfile to build.
      type: string
    - name: CONTEXT
      default: .
      description: Path to the directory to use as context.
      type: string
    - name: TLSVERIFY
      default: "true"
      description: >-
        Verify the TLS on the registry endpoint (for push/pull to a non-TLS
        registry)
      type: string
    - name: FORMAT
      default: oci
      description: "The format of the built container, oci or docker"
      type: string
    - name: BUILD_EXTRA_ARGS
      default: ""
      description: Extra parameters passed for the build command when building images.
      type: string
    - name: PUSH_EXTRA_ARGS
      default: ""
      description: Extra parameters passed for the push command when pushing images.
      type: string
  volumes:
    - emptyDir: {}
      name: varlibcontainers
  workspaces:
    - name: source
      mountPath: /source
  results:
    - description: Digest of the image just built.
      name: IMAGE_DIGEST
  steps:
    - name: build
      image: $(params.BUILDER_IMAGE)
      resources: {}
      script: |
        buildah --storage-driver=$(params.STORAGE_DRIVER) bud \
          $(params.BUILD_EXTRA_ARGS) --format=$(params.FORMAT) \
          --tls-verify=$(params.TLSVERIFY) --no-cache \
          -f $(params.DOCKERFILE) -t $(params.IMAGE_NAME):$(params.IMAGE_TAG) .
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
      workingDir: $(workspaces.source.path)/$(params.CONTEXT)
    - name: push
      image: $(params.BUILDER_IMAGE)
      resources: {}
      script: |
        # buildah requires a slight modification to the push secret provided by the service
        # account in order to use it for pushing the image
        cp /var/run/secrets/openshift.io/push/.dockercfg /tmp
        (echo "{ \"auths\": " ; cat /var/run/secrets/openshift.io/push/.dockercfg ; echo "}") > /tmp/.dockercfg

        # push the new image to the target for the build
        buildah --storage-driver=$(params.STORAGE_DRIVER) push \
          $(params.PUSH_EXTRA_ARGS) --tls-verify=$(params.TLSVERIFY) \
          --authfile /tmp/.dockercfg \
          --digestfile $(workspaces.source.path)/image-digest $(params.IMAGE_NAME) \
          $(params.IMAGE_REGISTRY)$(params.IMAGE_NAME):$(params.IMAGE_TAG)
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
      workingDir: $(workspaces.source.path)
    - name: digest-to-results
      image: $(params.BUILDER_IMAGE)
      resources: {}
      script: >-
        cat $(workspaces.source.path)/image-digest | tee
        /tekton/results/IMAGE_DIGEST
