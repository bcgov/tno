kind: Template
apiVersion: template.openshift.io/v1
metadata:
  name: elastic-deploy
  annotations:
    openshift.io/display-name: Elasticsearch Server
    description: Elasticsearch is a search engine based on the Lucene library. It provides a distributed, multitenant-capable full-text search engine with an HTTP web interface and schema-free JSON documents.
    tags: tno,elastic
parameters:
  - name: SOLUTION_NAME
    displayName: Solution Group Name
    description: The name of the solution (e.g tno).
    required: true
    value: "tno"
  - name: APP_NAME
    displayName: Application Name
    description: The name of the application (e.g. api-editor.dev).
    required: true
    value: "elastic"

  - name: PROJECT_NAMESPACE
    displayName: OpenShift Project Namespace
    description: The namespace of the OpenShift project containing the application.
    required: true
    value: "9b301c"
  - name: ENV_NAME
    displayName: Environment name
    description: The name for this environment [dev, test, prod]
    required: true
    value: "dev"

  - name: IMAGE
    displayName: Source Image
    description: The full path to the source image.
    required: true
    value: "docker.elastic.co/elasticsearch/elasticsearch"
  - name: IMAGE_TAG
    displayName: Source Image Tag
    description: The version tag of the source image.
    required: true
    value: "7.15.0"

  - name: ROLE_NAME
    displayName: Role Name
    description: The role name for this node.
    required: true
    value: "master"
  - name: HTTP_PORT
    displayName: HTTP Client Port
    description: The REST API port to communicate with the elastic.
    required: true
    value: "9200"
  - name: COM_PORT
    displayName: Node Communication Port
    description: The port nodes use to communicate with each other.
    required: true
    value: "9300"
  - name: ES_JAVA_OPTS
    displayName: HTTP Client Port
    description: The REST API port to communicate with the elastic.
    required: true
    value: "-Xms512m -Xmx512m"

  - name: CPU_REQUEST
    displayName: Requested Minimum Resources CPU Limit
    description: The requested minimum resources CPU limit (in cores) for this build.
    required: true
    value: 100m
  - name: CPU_LIMIT
    displayName: Resources CPU Limit
    description: The resources CPU limit (in cores) for this build.
    required: true
    value: 1000m
  - name: MEMORY_REQUEST
    displayName: Requested Minimum Memory Limit
    description: Minimum requested amount of memory the container can use.
    required: true
    value: 250Mi
  - name: MEMORY_LIMIT
    displayName: Memory Limit
    description: Maximum amount of memory the container can use.
    required: true
    value: 2Gi

objects:
  # Expose the elastic port to the pod.
  - kind: Service
    apiVersion: v1
    metadata:
      name: ${SOLUTION_NAME}-${APP_NAME}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      annotations:
        description: Exposes the elastic server
      labels:
        name: ${SOLUTION_NAME}-${APP_NAME}
        solution: ${SOLUTION_NAME}
        app: ${APP_NAME}
    spec:
      ports:
        - name: ${HTTP_PORT}-tcp
          protocol: TCP
          port: ${{HTTP_PORT}}
          targetPort: ${{HTTP_PORT}}
        - name: ${COM_PORT}-com
          protocol: TCP
          port: ${{COM_PORT}}
          targetPort: ${{COM_PORT}}
      selector:
        solution: ${SOLUTION_NAME}
        app: ${APP_NAME}
        role: ${ROLE_NAME}
      type: ClusterIP
      sessionAffinity: None

  # Configure how the elastic is deployed to the pod.
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: ${SOLUTION_NAME}-${APP_NAME}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      annotations:
        description: Defines how to deploy the elastic server
      labels:
        name: ${SOLUTION_NAME}-${APP_NAME}
        solution: ${SOLUTION_NAME}
        app: ${APP_NAME}
        role: ${ROLE_NAME}
    spec:
      replicas: 1
      strategy:
        type: Recreate
      recreateParams:
        pre: {}
        mid: {}
        post: {}
      triggers:
        - type: ConfigChange
      selector:
        solution: ${SOLUTION_NAME}
        app: ${APP_NAME}
        role: ${ROLE_NAME}
      template:
        metadata:
          name: ${SOLUTION_NAME}-${APP_NAME}
          labels:
            solution: ${SOLUTION_NAME}
            app: ${APP_NAME}
            role: ${ROLE_NAME}
        spec:
          volumes:
            - name: data
              persistentVolumeClaim:
                claimName: ${SOLUTION_NAME}-${APP_NAME}
            - name: backup
              persistentVolumeClaim:
                claimName: ${SOLUTION_NAME}-database-backup
            - name: config
              configMap:
                name: ${SOLUTION_NAME}-${APP_NAME}
          containers:
            - name: ${SOLUTION_NAME}-${APP_NAME}
              image: ${IMAGE}:${IMAGE_TAG}
              ports:
                - name: ${HTTP_PORT}-tcp
                  containerPort: ${{HTTP_PORT}}
                  protocol: TCP
                - name: ${COM_PORT}-com
                  containerPort: ${{COM_PORT}}
                  protocol: TCP
              env:
                - name: ELASTIC_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${SOLUTION_NAME}-${APP_NAME}
                      key: ELASTIC_PASSWORD
                - name: ES_JAVA_OPTS
                  value: ${ES_JAVA_OPTS}
              resources:
                limits:
                  cpu: ${CPU_LIMIT}
                  memory: ${MEMORY_LIMIT}
                requests:
                  cpu: "${CPU_REQUEST}"
                  memory: "${MEMORY_REQUEST}"
              volumeMounts:
                - name: data
                  mountPath: /usr/share/elasticsearch/data
                - name: backup
                  mountPath: /backups
                - name: config
                  mountPath: /usr/share/elasticsearch/config/elasticsearch.yml
                  readOnly: true
                  subPath: elasticsearch.yml
