apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: api-editor-deploy
  annotations:
    description: Editor API application deployment configuration
    openshift.io/display-name: Editor API Application Deployment Configuration
    openshift.io/long-description: Deployment configuriation to Editor API application.
    tags: api,java,maven,editor

parameters:
  - name: SOLUTION_NAME
    displayName: Solution Group Name
    description: The name of the solution (e.g tno).
    required: true
    value: "tno"
  - name: APP_NAME
    displayName: Application Name
    description: The name of the application.
    required: true
    value: "api-editor"

  - name: PROJECT_NAMESPACE
    displayName: OpenShift Project Namespace
    description: The namespace of the OpenShift project containing the application.
    required: true
    value: '9b301c'
  - name: ENV_NAME
    displayName: Environment name
    description: The name for this environment [dev, test, prod]
    required: true
    value: 'dev'

  - name: IMAGE_TAG
    displayName: Image Tag
    description: The image tag that identifies which image to run. (i.e. 'dev').
    value: 'dev'

  - name: APP_PORT
    displayName: Application Port
    description: The port used to communicate with the Pod
    value: '8080'

  - name: KEYCLOAK_AUTH_SERVER_URL
    displayName: Keycloak Authority URL
    description: The Keycloak authority URL.
    required: true
    value: https://dev.oidc.gov.bc.ca/auth/
  - name: KEYCLOAK_REALM
    displayName: Keycloak SSO realm
    description: Keycloak SSO realm, used by the frontend login.
    required: true
    value: gcpe
  - name: KEYCLOAK_CLIENT_ID
    displayName: Keycloak Client ID
    description: The Keycloak Client ID to identify the resource.
    required: true
    value: tno-api

  - name: DB_SECRETS_NAME
    displayName: Database Secret Name
    description: Name of the database secrets object.
    required: true
    value: tno-database
  - name: DB_URL
    displayName: Database URL
    description: PostgreSQL database URL connection string.
    required: true
    value: jdbc:postgresql://tno-database:5432/tno

  - name: ELASTIC_SECRETS_NAME
    displayName: Elasticsearch Secret Name
    description: Name of the Elasticsearch secrets object.
    required: true
    value: tno-elastic
  - name: ELASTIC_URIS
    displayName: Elasticsearch Server URIs
    description: Comma delimited Elasticsearch server URIs.
    required: true
    value: tno-elastic:9200

  - name: KAFKA_BOOTSTRAP_SERVERS
    displayName: Kafka Bootstrap Servers
    description: Comma delimited Kafka bootstrap servers.
    required: true
    value: tno-kafka-broker:29094

  - name: REPLICAS
    displayName: Pod Replicas
    description: Number of pod replicas to run
    value: '3'
  - name: CPU_REQUEST
    displayName: Requested Minimum Resources CPU Limit
    description: The requested minimum resources CPU limit (in cores) for this build.
    required: true
    value: 20m
  - name: CPU_LIMIT
    displayName: Resources CPU Limit
    description: The resources CPU limit (in cores) for this build.
    required: true
    value: 100m
  - name: MEMORY_REQUEST
    displayName: Requested Minimum Memory Limit
    description: Minimum requested amount of memory the container can use.
    required: true
    value: 250Mi
  - name: MEMORY_LIMIT
    displayName: Memory Limit
    description: Maximum amount of memory the container can use.
    required: true
    value: 500Mi

objects:
  # Open up ports to communicate with the app.
  - kind: Service
    apiVersion: v1
    metadata:
      name: ${SOLUTION_NAME}-${APP_NAME}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      annotations:
        description: Exposes and load balances the application pods.
      labels:
        name: ${SOLUTION_NAME}-${APP_NAME}
        solution: ${SOLUTION_NAME}
        app: ${APP_NAME}
    spec:
      ports:
        - name: ${APP_PORT}-tcp
          port: ${{APP_PORT}}
          protocol: TCP
          targetPort: ${{APP_PORT}}
      selector:
        solution: ${SOLUTION_NAME}
        app: ${APP_NAME}
      sessionAffinity: None
      type: ClusterIP

  # Configuration settings
  - kind: ConfigMap
    apiVersion: v1
    metadata:
      name: ${SOLUTION_NAME}-${APP_NAME}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      annotations:
        description: API configuration settings
      labels:
        name: ${SOLUTION_NAME}-${APP_NAME}
        solution: ${SOLUTION_NAME}
        app: ${APP_NAME}
    type: Opaque
    data:
      KEYCLOAK_AUTH_SERVER_URL: ${KEYCLOAK_AUTH_SERVER_URL}
      KEYCLOAK_REALM: ${KEYCLOAK_REALM}
      KEYCLOAK_CLIENT_ID: ${KEYCLOAK_CLIENT_ID}

      DB_URL: ${DB_URL}

      ELASTIC_URIS: ${ELASTIC_URIS}

      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}

  # How the app will be deployed to the pod.
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: ${SOLUTION_NAME}-${APP_NAME}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      annotations:
        description: Defines how to deploy ${SOLUTION_NAME}-${APP_NAME}
      labels:
        name: ${SOLUTION_NAME}-${APP_NAME}
        solution: ${SOLUTION_NAME}
        app: ${APP_NAME}
    spec:
      replicas: ${{REPLICAS}}
      selector:
        name: ${SOLUTION_NAME}-${APP_NAME}
        solution: ${SOLUTION_NAME}
        app: ${APP_NAME}
      strategy:
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 600
          updatePeriodSeconds: 1
        type: Rolling
      template:
        metadata:
          name: ${SOLUTION_NAME}-${APP_NAME}
          labels:
            name: ${SOLUTION_NAME}-${APP_NAME}
            solution: ${SOLUTION_NAME}
            app: ${APP_NAME}
        spec:
          containers:
            - name: ${SOLUTION_NAME}-${APP_NAME}
              image: ''
              imagePullPolicy: Always
              ports:
                - containerPort: ${{APP_PORT}}
                  protocol: TCP
              resources:
                requests:
                  cpu: ${CPU_REQUEST}
                  memory: ${MEMORY_REQUEST}
                limits:
                  cpu: ${CPU_LIMIT}
                  memory: ${MEMORY_LIMIT}
              env:
                - name: KEYCLOAK_AUTH_SERVER_URL
                  valueFrom:
                    configMapKeyRef:
                      name: ${SOLUTION_NAME}-${APP_NAME}
                      key: KEYCLOAK_AUTH_SERVER_URL
                - name: KEYCLOAK_REALM
                  valueFrom:
                    configMapKeyRef:
                      name: ${SOLUTION_NAME}-${APP_NAME}
                      key: KEYCLOAK_REALM
                - name: KEYCLOAK_RESOURCE
                  valueFrom:
                    configMapKeyRef:
                      name: ${SOLUTION_NAME}-${APP_NAME}
                      key: KEYCLOAK_CLIENT_ID

                - name: KAFKA_BOOTSTRAP_SERVERS
                  valueFrom:
                    configMapKeyRef:
                      name: ${SOLUTION_NAME}-${APP_NAME}
                      key: KAFKA_BOOTSTRAP_SERVERS

                - name: DB_URL
                  valueFrom:
                    configMapKeyRef:
                      name: ${SOLUTION_NAME}-${APP_NAME}
                      key: DB_URL
                - name: DB_USERNAME
                  valueFrom:
                    secretKeyRef:
                      name: ${DB_SECRETS_NAME}
                      key: POSTGRESQL_USER
                - name: DB_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${DB_SECRETS_NAME}
                      key: POSTGRESQL_PASSWORD

                - name: ELASTIC_URIS
                  valueFrom:
                    configMapKeyRef:
                      name: ${SOLUTION_NAME}-${APP_NAME}
                      key: ELASTIC_URIS
                - name: ELASTIC_USERNAME
                  valueFrom:
                    secretKeyRef:
                      name: ${ELASTIC_SECRETS_NAME}
                      key: ELASTIC_USERNAME
                - name: ELASTIC_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${ELASTIC_SECRETS_NAME}
                      key: ELASTIC_PASSWORD

                - name: AZURE_STORAGE_CONTAINER_NAME
                  valueFrom:
                    secretKeyRef:
                      name: ${SOLUTION_NAME}-${APP_NAME}
                      key: AZURE_STORAGE_CONTAINER_NAME
                - name: AZURE_STORAGE_CONNECTION_STRING
                  valueFrom:
                    secretKeyRef:
                      name: ${SOLUTION_NAME}-${APP_NAME}
                      key: AZURE_STORAGE_CONNECTION_STRING

                - name: COGNITIVE_SERVICES_SPEECH_SUBSCRIPTION_KEY
                  valueFrom:
                    secretKeyRef:
                      name: ${SOLUTION_NAME}-${APP_NAME}
                      key: COGNITIVE_SERVICES_SPEECH_SUBSCRIPTION_KEY
                - name: COGNITIVE_SERVICES_SPEECH_REGION
                  valueFrom:
                    secretKeyRef:
                      name: ${SOLUTION_NAME}-${APP_NAME}
                      key: COGNITIVE_SERVICES_SPEECH_REGION

                - name: AZURE_VIDEO_ANALYZER_SUBSCRIPTION_KEY
                  valueFrom:
                    secretKeyRef:
                      name: ${SOLUTION_NAME}-${APP_NAME}
                      key: AZURE_VIDEO_ANALYZER_SUBSCRIPTION_KEY
                - name: AZURE_VIDEO_ANALYZER_ACCOUNT_ID
                  valueFrom:
                    secretKeyRef:
                      name: ${SOLUTION_NAME}-${APP_NAME}
                      key: AZURE_VIDEO_ANALYZER_ACCOUNT_ID
                - name: AZURE_VIDEO_ANALYZER_LOCATION
                  valueFrom:
                    secretKeyRef:
                      name: ${SOLUTION_NAME}-${APP_NAME}
                      key: AZURE_VIDEO_ANALYZER_LOCATION
              # livenessProbe:
              #   httpGet:
              #     path: '/health'
              #     port: ${{APP_PORT}}
              #     scheme: HTTP
              #   initialDelaySeconds: 120
              #   timeoutSeconds: 60
              #   periodSeconds: 30
              #   successThreshold: 1
              #   failureThreshold: 3
              # readinessProbe:
              #   httpGet:
              #     path: '/health'
              #     port: ${{APP_PORT}}
              #     scheme: HTTP
              #   initialDelaySeconds: 120
              #   timeoutSeconds: 60
              #   periodSeconds: 30
              #   successThreshold: 1
              #   failureThreshold: 3
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          securityContext: {}
          terminationGracePeriodSeconds: 30
      test: false
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - ${SOLUTION_NAME}-${APP_NAME}
            from:
              kind: ImageStreamTag
              namespace: ${PROJECT_NAMESPACE}-tools
              name: ${SOLUTION_NAME}-${APP_NAME}:${IMAGE_TAG}
