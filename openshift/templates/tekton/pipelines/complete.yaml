kind: Template
apiVersion: template.openshift.io/v1
metadata:
  name: oc-complete-pipeline
  annotations:
    openshift.io/display-name: OC Mono-repo Pipeline
    description: Build and deploy all components from the mono-repo via oc commands.
    tags: oc,pipeline

parameters:
  - name: API_NAME
    displayName: API Application Name
    description: The name of the application.
    required: true
    value: api
  - name: APP_NAME
    displayName: Application Name
    description: The name of the application.
    required: true
    value: editor
  - name: MIGRATION_NAME
    displayName: Database Migration Name
    description: The name of the database migration.
    required: true
    value: db-migration
  - name: DB_NAME
    displayName: Database Name
    description: The name of the database deployment config.
    required: true
    value: database
  - name: NGINX_NAME
    displayName: Nginx Name
    description: The name of the nginx service.
    required: true
    value: nginx
  - name: BACKUP_NAME
    displayName: Database Backup Name
    description: The name of the database backup deployment config.
    required: true
    value: backup

  - name: GIT_SOURCE
    displayName: Git Source Identifier
    description: >-
      Identify the git source for this build.
      A git source name is applied to the end of a BuildConfig to
      identify the source (i.e. editor.{GIT_SOURCE}).
    required: true
    value: dev

  - name: IMAGE_TAG
    displayName: Output Image Tag
    description: >-
      The tag given to the built images.
      Use this to create versioned images.
    required: true
    value: latest

  - name: DEPLOY_TO
    displayName: Deploy To
    description: Identify the environment to deploy the solution to [dev,test,prod,tools].
    required: true
    value: dev

  - name: WEB_APP_URL
    displayName: Web Application URL
    description: The URL to the web application that will be ZAP scanned.
    required: false
    value: https://tno-dev.apps.silver.devops.gov.bc.ca

objects:
  - apiVersion: tekton.dev/v1alpha1
    kind: Pipeline
    metadata:
      name: full-pipeline
      annotations:
        description: >-
          Build an docker image from a GIT repository using an existing BuildConfig.
          Then deploy to the specified environment.
        tags: oc,git,docker,build,deploy
    spec:
      params:
        - name: GIT_SOURCE
          description: >-
            Identify the git source for this build.
            A git source name is applied to the end of a BuildConfig to
            identify the source (i.e. editor.{GIT_SOURCE}).
          type: string
          default: ${GIT_SOURCE}

        - name: IMAGE_TAG
          description: >-
            The tag given to the built images.
            Use this to create versioned images.
          type: string
          default: ${IMAGE_TAG}

        - name: PROJECT_SHORTNAME
          description: >-
            The project namespace shortname.
            The part before the "-" (i.e. 9b301c-dev = 9b301c).
          type: string
          default: 9b301c
        - name: DEPLOY_TO
          description: >-
            Identify the environment to deploy the solution to [dev,test,prod,tools].
          type: string
          default: ${DEPLOY_TO}

        - name: WEB_APP_URL
          description: The URL to the web application that will be ZAP scanned.
          type: string
          default: ${WEB_APP_URL}

      workspaces:
        - name: owasp-settings
          description: |
            mounts /zap/wrk to store generated configs and results.

      tasks:
        # - name: database-backup
        #   taskRef:
        #     name: oc-backup
        #     kind: Task
        #   params:
        #     - name: PROJECT_NAMESPACE
        #       value: $(params.PROJECT_SHORTNAME)-$(params.DEPLOY_TO)
        #     - name: DEPLOYMENT_CONFIG
        #       value: ${BACKUP_NAME}

        - name: build-db-migration
          taskRef:
            name: oc-build
            kind: Task
          params:
            - name: APP_NAME
              value: ${MIGRATION_NAME}
            - name: GIT_SOURCE
              value: $(params.GIT_SOURCE)
            - name: IMAGE_TAG
              value: $(params.IMAGE_TAG)

        - name: build-api
          taskRef:
            name: oc-build
            kind: Task
          params:
            - name: APP_NAME
              value: ${API_NAME}
            - name: GIT_SOURCE
              value: $(params.GIT_SOURCE)
            - name: IMAGE_TAG
              value: $(params.IMAGE_TAG)

        - name: build-app
          taskRef:
            name: oc-build
            kind: Task
          params:
            - name: APP_NAME
              value: ${APP_NAME}
            - name: GIT_SOURCE
              value: $(params.GIT_SOURCE)
            - name: IMAGE_TAG
              value: $(params.IMAGE_TAG)

        - name: maintenance-on
          runAfter:
            - build-db-migration
            - build-api
            - build-app
          taskRef:
            name: oc-update-route
            kind: Task
          params:
            - name: PROJECT_NAMESPACE
              value: $(params.PROJECT_SHORTNAME)-$(params.DEPLOY_TO)
            - name: ROUTE
              value: ${APP_NAME}
            - name: SERVICE
              value: ${NGINX_NAME}

        - name: run-db-migration
          runAfter:
            - maintenance-on
            # - database-backup
            - build-db-migration
          taskRef:
            name: db-migration
            kind: Task
          params:
            - name: MIGRATION_IMAGE
              value: ${MIGRATION_NAME}
            - name: DB_SECRET_NAME
              value: crunchy-pguser-admin
            - name: API_NAME
              value: ${API_NAME}
            - name: IMAGE_TAG
              value: $(params.IMAGE_TAG)
            - name: DEPLOY_TO
              value: $(params.DEPLOY_TO)

        - name: deploy-api
          runAfter:
            - maintenance-on
            - run-db-migration
            - build-api
          taskRef:
            name: oc-deploy-with-tag
            kind: Task
          params:
            - name: IMAGE_NAME
              value: ${API_NAME}
            - name: IMAGE_TAG
              value: $(params.IMAGE_TAG)
            - name: ENV
              value: $(params.DEPLOY_TO)

        - name: deploy-app
          runAfter:
            - maintenance-on
            - run-db-migration
            - build-app
          taskRef:
            name: oc-deploy-with-tag
            kind: Task
          params:
            - name: IMAGE_NAME
              value: ${APP_NAME}
            - name: IMAGE_TAG
              value: $(params.IMAGE_TAG)
            - name: ENV
              value: $(params.DEPLOY_TO)

        - name: maintenance-off
          runAfter:
            - run-db-migration
            - deploy-api
            - deploy-app
          taskRef:
            name: oc-update-route
            kind: Task
          params:
            - name: PROJECT_NAMESPACE
              value: $(params.PROJECT_SHORTNAME)-$(params.DEPLOY_TO)
            - name: ROUTE
              value: ${APP_NAME}
            - name: SERVICE
              value: ${APP_NAME}

        - name: owasp-scanner
          # conditions:
          #   - conditionRef: param-has-value
          #     params:
          #       - name: VALUE
          #         value: $(params.WEB_APP_URL)
          runAfter:
            - maintenance-off
          taskRef:
            name: owasp-scanner
            kind: Task
          params:
            - name: TARGET_URL
              value: $(params.WEB_APP_URL)
            - name: SCAN_TYPE
              value: quick
            - name: SCAN_DURATION
              value: "1"
          workspaces:
            - name: owasp-settings
              workspace: owasp-settings
