kind: Template
apiVersion: v1
metadata:
  name: postgres-deploy
  annotations:
    openshift.io/display-name: PostgreSQL Database Server
    description: The World's Most Advanced Open Source Relational Database.
    tags: tno,database,postgres
parameters:
  - name: APP_NAME
    displayName: "App Name"
    description: "The name of the application (grouped)."
    required: true
    value: "tno"
  - name: ROLE_NAME
    displayName: "Component Role Name"
    description: "The name of the application component role [app, api, database]"
    required: true
    value: "database"
  - name: ENV_NAME
    displayName: "Environment name"
    description: "The name for this environment [dev, test, prod]"
    required: true
    value: "dev"
  - name: PROJECT_NAMESPACE
    displayName: "OpenShift Project Namespace"
    description: "The namespace of the OpenShift project containing the application."
    required: true
    value: "9b301c"
  - name: INSTANCE
    displayName: "Unique Identifier"
    description: "A unique identifier to allow for multiple instances (i.e. '-01')."
    value: ""

  - name: IMAGE_TAG
    displayName: "Source Image Tag"
    description: "The tag given to the built image that will be deployed."
    required: true
    value: "latest"

  - name: POSTGRESQL_USER
    displayName: "Database user username"
    description: "The username of the database administrator."
    required: true
    value: "admin"
  - name: POSTGRESQL_PASSWORD
    displayName: "Database user Password"
    description: "The password of the database administrator."
    from: '[\w]{5}_[\w]{15}_1aB!'
    generate: expression
  - name: POSTGRESQL_ADMIN_PASSWORD
    displayName: "Database administrator Password"
    description: "The password of the database administrator."
    from: '[\w]{5}_[\w]{15}_1aB!'
    generate: expression
  - name: POSTGRESQL_PORT
    displayName: "Database container port"
    description: "The port to communicate with the database."
    required: true
    value: "5432"
  - name: POSTGRESQL_DATABASE
    displayName: "Solution Database Name"
    description: "The name of the solution database that will be created."
    required: true
    value: "tno"
  - name: KEYCLOAK_DATABASE
    displayName: "Keycloak Database Name"
    description: "The name of the keycloak database that will be created."
    required: true
    value: "keycloak"

  - name: STORAGE_CLASS_NAME
    displayName: "The Storage Class Name"
    description: "The storage class name is the type of storage [netapp-file-standard, netapp-file-extended, netapp-file-backup, netapp-block-standard, netapp-block-extended]"
    required: true
    value: "netapp-file-standard"
  - name: ACCESS_MODE
    displayName: "The Storage Access Mode"
    description: "The storage access mode [ReadWriteOnce, ReadWriteMany]"
    required: true
    value: "ReadWriteMany"
  - name: VOLUME_CAPACITY
    displayName: "Persistent Volume Capacity"
    description: "Volume space available for data, e.g. 512Mi, 2Gi."
    required: true
    value: "5Gi"

  - name: BACKUP_ROLE_NAME
    displayName: "Backup Service Role Name"
    description: "The name of the application component role [app, api, database, backup]"
    required: true
    value: "backup"
  - name: BACKUP_STORAGE_CLASS_NAME
    displayName: "The Backup Storage Class Name"
    description: "The backup storage class name is the type of storage [netapp-file-standard, netapp-file-extended, netapp-file-backup, netapp-block-standard, netapp-block-extended]"
    required: true
    value: "netapp-file-backup"
  - name: BACKUP_ACCESS_MODE
    displayName: "The Backup Storage Access Mode"
    description: "The backup storage access mode [ReadWriteOnce, ReadWriteMany]"
    required: true
    value: "ReadWriteMany"
  - name: BACKUP_VOLUME_CAPACITY
    displayName: "Backup persistent Volume Capacity"
    description: "Backup bolume space available for data, e.g. 512Mi, 2Gi."
    required: true
    value: "5Gi"

  - name: CPU_REQUEST
    displayName: "Requested Minimum Resources CPU Limit"
    description: "The requested minimum resources CPU limit (in cores) for this build."
    required: true
    value: 100m
  - name: CPU_LIMIT
    displayName: "Resources CPU Limit"
    description: "The resources CPU limit (in cores) for this build."
    required: true
    value: 1000m
  - name: MEMORY_REQUEST
    displayName: "Requested Minimum Memory Limit"
    description: "Minimum requested amount of memory the container can use."
    required: true
    value: 250Mi
  - name: MEMORY_LIMIT
    displayName: "Memory Limit"
    description: "Maximum amount of memory the container can use."
    required: true
    value: 500Mi
objects:
  # Persistent storage for the database.
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: ${APP_NAME}-${ROLE_NAME}${INSTANCE}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      labels:
        name: ${APP_NAME}-database${INSTANCE}
        app: ${APP_NAME}
        env: ${ENV_NAME}
        role: ${ROLE_NAME}
    resourceVersion: "250191500"
    selfLink: /api/v1/namespaces/${PROJECT_NAMESPACE}-${ENV_NAME}/persistentvolumeclaims/${APP_NAME}-${ROLE_NAME}${INSTANCE}
    annotations:
      pv.kubernetes.io/bind-completed: "yes"
      pv.kubernetes.io/bound-by-controller: "yes"
      volume.beta.kubernetes.io/storage-provisioner: csi.trident.netapp.io
      description: "${APP_NAME} Database storage volume"
    finalizers:
      - kubernetes.io/pvc-protection
    spec:
      accessModes:
        - ${ACCESS_MODE}
      resources:
        requests:
          storage: ${VOLUME_CAPACITY}
      storageClassName: ${STORAGE_CLASS_NAME}
      volumeMode: Filesystem

  # Storage for backup.
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: ${APP_NAME}-${BACKUP_ROLE_NAME}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      labels:
        name: ${APP_NAME}-${BACKUP_ROLE_NAME}
        app: ${APP_NAME}
        role: ${BACKUP_ROLE_NAME}
        env: ${ENV_NAME}
    spec:
      storageClassName: ${BACKUP_STORAGE_CLASS_NAME}
      accessModes:
        - ${BACKUP_ACCESS_MODE}
      resources:
        requests:
          storage: ${BACKUP_VOLUME_CAPACITY}

  # Add a resource secret for the database password.  By default this is generated.
  - kind: Secret
    apiVersion: v1
    metadata:
      name: ${APP_NAME}-${ROLE_NAME}${INSTANCE}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      annotations:
        description: "Database connection settings"
      labels:
        name: ${APP_NAME}-${ROLE_NAME}${INSTANCE}
        app: ${APP_NAME}
        role: ${ROLE_NAME}
        env: ${ENV_NAME}
    type: Opaque
    stringData:
      POSTGRESQL_USER: ${POSTGRESQL_USER}
      POSTGRESQL_PASSWORD: ${POSTGRESQL_PASSWORD}
      POSTGRESQL_ADMIN_PASSWORD: ${POSTGRESQL_ADMIN_PASSWORD}

  # Expose the database port to the pod.
  - kind: Service
    apiVersion: v1
    metadata:
      name: ${APP_NAME}-${ROLE_NAME}${INSTANCE}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      annotations:
        description: Exposes the database server
      labels:
        name: ${APP_NAME}-${ROLE_NAME}${INSTANCE}
        app: ${APP_NAME}
        role: ${ROLE_NAME}
        env: ${ENV_NAME}
    spec:
      ports:
        - name: ${POSTGRESQL_PORT}-tcp
          protocol: TCP
          port: ${{POSTGRESQL_PORT}}
          targetPort: ${{POSTGRESQL_PORT}}
      selector:
        name: ${APP_NAME}-${ROLE_NAME}${INSTANCE}
      type: ClusterIP
      sessionAffinity: None

  # Configure how the database is deployed to the pod.
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: ${APP_NAME}-${ROLE_NAME}${INSTANCE}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      annotations:
        description: Defines how to deploy the database server
      labels:
        name: ${APP_NAME}-${ROLE_NAME}${INSTANCE}
        app: ${APP_NAME}
        role: ${ROLE_NAME}
        env: ${ENV_NAME}
    spec:
      strategy:
        type: Recreate
      recreateParams:
        pre: {}
        mid: {}
        post: {}
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - ${APP_NAME}-${ROLE_NAME}${INSTANCE}
            from:
              kind: ImageStreamTag
              namespace: "${PROJECT_NAMESPACE}-tools"
              name: ${APP_NAME}-${ROLE_NAME}:${IMAGE_TAG}
      replicas: 1
      selector:
        name: ${APP_NAME}-${ROLE_NAME}${INSTANCE}
      template:
        metadata:
          name: ${APP_NAME}-${ROLE_NAME}${INSTANCE}
          labels:
            name: ${APP_NAME}-${ROLE_NAME}${INSTANCE}
            app: ${APP_NAME}
            role: ${ROLE_NAME}
            env: ${ENV_NAME}
        spec:
          volumes:
            - name: db-data
              persistentVolumeClaim:
                claimName: ${APP_NAME}-${ROLE_NAME}${INSTANCE}
            - name: backup
              persistentVolumeClaim:
                claimName: ${APP_NAME}-${BACKUP_ROLE_NAME}
          containers:
            - name: ${APP_NAME}-${ROLE_NAME}${INSTANCE}
              image: ""
              ports:
                - containerPort: ${{POSTGRESQL_PORT}}
                  protocol: TCP
              env:
                - name: POSTGRESQL_USER
                  valueFrom:
                    secretKeyRef:
                      name: ${APP_NAME}-${ROLE_NAME}${INSTANCE}
                      key: POSTGRESQL_USER
                - name: POSTGRESQL_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${APP_NAME}-${ROLE_NAME}${INSTANCE}
                      key: POSTGRESQL_PASSWORD
                - name: POSTGRESQL_ADMIN_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${APP_NAME}-${ROLE_NAME}${INSTANCE}
                      key: POSTGRESQL_ADMIN_PASSWORD
                - name: POSTGRESQL_DATABASE
                  value: ${POSTGRESQL_DATABASE}
                - name: KEYCLOAK_DATABASE
                  value: ${KEYCLOAK_DATABASE}
              resources:
                limits:
                  cpu: ${CPU_LIMIT}
                  memory: ${MEMORY_LIMIT}
                requests:
                  cpu: "${CPU_REQUEST}"
                  memory: "${MEMORY_REQUEST}"
              volumeMounts:
                - name: db-data
                  mountPath: /var/lib/postgresql/data
                - name: backup
                  mountPath: /backups
              readinessProbe:
                initialDelaySeconds: 5
                timeoutSeconds: 5
                failureThreshold: 4
                exec:
                  command:
                    - "/usr/libexec/check-container"
              livenessProbe:
                initialDelaySeconds: 5
                timeoutSeconds: 5
                failureThreshold: 4
                exec:
                  command:
                    - "/usr/libexec/check-container"
                    - "--live"
