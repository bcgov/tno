apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: db-migration-conditional
  description: >-
    This task runs the database migration if the source code requires a new build.
  annotations:
    tekton.dev/displayName: Run Database Migration
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/tags: docker
  labels:
    name: db-migration-conditional
    part-of: tno
    version: 1.0.0
    component: task
    managed-by: kustomize
spec:
  params:
    - name: IMAGE
      description: The name of the database migration image.
      type: string
      default: db-migration
    - name: PROJECT_SHORTNAME
      description: The shortname of the project namespace.
      type: string
      default: 9b301c

    - name: IMAGE_TAG
      description: The tag given to the built image.
      type: string
      default: latest

    - name: BUILD
      description: Whether to force build the component [condition|yes].
      default: "condition"

    - name: DEPLOY_TO
      description: Which environment to deploy to
      type: string
      default: dev

  workspaces:
    - name: conditions
      mountPath: /data

  steps:
    - name: run
      image: "image-registry.openshift-image-registry.svc:5000/openshift/cli:latest"
      resources: {}
      script: |
        #!/usr/bin/env bash
        set -e

        # Place config into environment variables.
        if test -f $(workspaces.conditions.path)/build.env; then
          export $(grep -v '^#' $(workspaces.conditions.path)/build.env | xargs)
        else
          echo 'Workspace conditions build.env not found'
          exit 1;
        fi

        # Check if this image needs to be built.
        if [ "${BUILD_DB}" = "true" ] || [ "$(params.BUILD)" = "yes" ]; then
          echo "Fetching connection information"

          PROJECT=$(params.PROJECT_SHORTNAME)-$(params.DEPLOY_TO)
          IMAGE=image-registry.apps.silver.devops.gov.bc.ca/$(params.PROJECT_SHORTNAME)-tools/$(params.IMAGE):$(params.IMAGE_TAG)

          echo "Running database migration in $PROJECT"
          oc run $(params.IMAGE) \
            -n $PROJECT \
            --image=$IMAGE \
            --image-pull-policy=Always \
            --attach \
            --rm \
            --labels='role=migration,part-of=tno,component=database' \
            --restart=Never \
            --timeout=10m \
            --override-type='merge' \
            --overrides='{
              "apiVersion":"v1",
              "spec":{
                "containers":[
                  {
                    "name":"$(params.IMAGE)",
                    "image":"image-registry.apps.silver.devops.gov.bc.ca/$(params.PROJECT_SHORTNAME)-tools/$(params.IMAGE):$(params.IMAGE_TAG)",
                    "env":[
                      {
                        "name":"ConnectionStrings__TNO",
                        "valueFrom":{
                          "configMapKeyRef":{
                            "name":"api",
                            "key":"CONNECTION_STRING"
                          }
                        }
                      },
                      {
                        "name":"DB_POSTGRES_USERNAME",
                        "valueFrom":{
                          "secretKeyRef":{
                            "name":"crunchy-pguser-admin",
                            "key":"user"
                          }
                        }
                      },
                      {
                        "name":"DB_POSTGRES_PASSWORD",
                        "valueFrom":{
                          "secretKeyRef":{
                            "name":"crunchy-pguser-admin",
                            "key":"password"
                          }
                        }
                      }
                    ],
                    "labels":{
                      "role":"migration","part-of":"tno","component":"database"
                      },
                    "resources":{
                      "requests":{
                        "memory":"1Gi"
                      },
                      "limits":{
                        "memory":"2Gi"
                      }
                    }
                  }
                ]
              }
            }'
        else
          echo 'Do not run $(params.IMAGE)'
        fi
