version: '3.5'

services:
  ####################### Nginx #######################
  nginx:
    image: tno:nginx
    profiles: ["core"]
    restart: on-failure:1
    container_name: tno-nginx
    build:
      context: ./network/nginx
    env_file:
      - network/nginx/.env
    ports:
      - ${NGINX_HTTP_PORT:-50080}:80
      - ${NGINX_HTTPS_PORT:-50443}:443
    networks:
      - tno

  ####################### Database #######################
  database:
    image: tno:database
    profiles: ["core", "data"]
    restart: on-failure:1
    container_name: tno-database
    build:
      context: db/postgres
    env_file:
      - db/postgres/.env
    ports:
      - ${DATABASE_PORT:-50002}:5432
    volumes:
      - tno-database-data:/var/lib/postgresql/data
      - tno-database-sdata:/var/lib/postgressql/data
      - ./db/postgres/scripts:/docker-entrypoint-initdb.d
    networks:
      - tno

  ####################### Keycloak #######################
  keycloak:
    image: tno:keycloak
    profiles: ["core"]
    restart: on-failure:1
    container_name: tno-keycloak
    build:
      context: ./auth/keycloak
    env_file:
      - auth/keycloak/.env
    volumes:
      - ./auth/keycloak/config/realm-export.json:/tmp/realm-export.json
    ports:
      - ${KEYCLOAK_HTTP_PORT:-50000}:8080
      - ${KEYCLOAK_HTTPS_PORT:-50001}:443
    depends_on:
      - database
    networks:
      - tno
    healthcheck:
      test: curl -s -f http://localhost:8080/auth/realms/tno || exit 1
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 15s

  ####################### Elasticsearch #######################
  elastic:
    image: tno:elastic
    profiles: ["core", "elastic", "data"]
    restart: on-failure:1
    container_name: tno-elastic
    build:
      context: db/elasticsearch
    env_file:
      - db/elasticsearch/.env
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - ${ELASTIC_HTTP_PORT:-50007}:9200
      - ${ELASTIC_COM_PORT:-50008}:9300
    volumes:
      - tno-elastic-data:/usr/share/elasticsearch/data
    networks:
      - tno
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "-u '$$ELASTIC_USERNAME:$$ELASTIC_PASSWORD'", "http://localhost:9200/_cat/health"]
    #   # test: curl -f -u '${ELASTIC_USERNAME}:${ELASTIC_PASSWORD}' http://localhost:9200/_cat/health
    #   interval: 1m
    #   timeout: 10s
    #   retries: 3
    #   start_period: 15s

  dejavu:
    image: tno:dejavu
    profiles: ["utility", "elastic"]
    restart: on-failure:1
    container_name: tno-dejavu
    build:
      context: db/elasticsearch/dejavu
    ports:
      - ${ELASTIC_DEJAVU_HTTP_PORT:-50009}:1358
    links:
      - elastic
    networks:
      - tno

  ####################### Azure Storage #######################
  azure-storage:
    image: tno:azure-storage
    profiles: ["core"]
    restart: on-failure:1
    container_name: tno-azure-storage
    build:
      context: db/azure-storage
    env_file:
      - db/azure-storage/.env
    ports:
      - ${AZURE_BLOB_PORT:-50020}:10000
      - ${AZURE_QUEUE_PORT:-50021}:10001
      - ${AZURE_TABLE_PORT:-50022}:10002
    volumes:
      - tno-azure-storage-data:/data
    networks:
      - tno

  ####################### API - Editor #######################
  api-editor:
    image: tno:api-editor
    profiles: ["core"]
    restart: on-failure:1
    container_name: tno-api-editor
    build:
      context: api/editor
    env_file: api/editor/.env
    ports:
      - ${API_EDITOR_HTTP_PORT:-50003}:8080
      - ${API_EDITOR_HTTPS_PORT:-50004}:443
    depends_on:
      - database
      - keycloak
    networks:
      - tno
    healthcheck:
      test: curl -s -f http://localhost:8080/health
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 15s

  ####################### App - Editor #######################
  app-editor:
    image: tno:app-editor
    profiles: ["core"]
    stdin_open: true
    tty: true
    restart: on-failure:1
    container_name: tno-app-editor
    build:
      context: app/editor
    env_file: ./app/editor/.env
    volumes:
      - ./app/editor/src:/usr/app/src
      - ./app/editor/public:/usr/app/public
      - tno-editor-node-cache:/usr/app/node_modules
    ports:
      - ${APP_EDITOR_HTTP_PORT:-50005}:3000
      - ${APP_EDITOR_HTTPS_PORT:-50006}:3443
    depends_on:
      - api-editor
    networks:
      - tno

  ####################### App - Subscriber #######################
  app-subscriber:
    image: tno:app-subscriber
    profiles: ["core"]
    stdin_open: true
    tty: true
    restart: on-failure:1
    container_name: tno-app-subscriber
    build:
      context: app/subscriber
    env_file: ./app/subscriber/.env
    volumes:
      - ./app/subscriber/src:/usr/app/src
      - ./app/subscriber/public:/usr/app/public
      - tno-subscriber-node-cache:/usr/app/node_modules
    ports:
      - ${APP_SUBSCRIBER_HTTP_PORT:-50050}:3000
      - ${APP_SUBSCRIBER_HTTPS_PORT:-50051}:3443
    depends_on:
      - api-editor
    networks:
      - tno

  ####################### Ingestion Services #######################

  rss:
    image: tno:rss
    profiles: ["service", "data"]
    restart: on-failure:1
    container_name: tno-rss
    build:
      context: services/syndication
    env_file:
      - services/syndication/rss.env
    ports:
      - ${SYNDICATION_PORT:-50052}:8080
    depends_on:
      - database
      - broker
    networks:
      - tno
    healthcheck:
      test: curl -s -f http://localhost:8080/health || exit 1
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s

  atom:
    image: tno:atom
    profiles: ["service", "data"]
    restart: on-failure:1
    container_name: tno-atom
    build:
      context: services/syndication
    env_file:
      - services/syndication/atom.env
    ports:
      - ${SYNDICATION_PORT:-50053}:8080
    depends_on:
      - database
      - broker
    networks:
      - tno
    healthcheck:
      test: curl -s -f http://localhost:8080/health || exit 1
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s

  nlp:
    image: tno:nlp
    profiles: ["service", "data"]
    restart: on-failure:1
    container_name: tno-nlp
    build:
      context: services/nlp
    env_file:
      - services/nlp/.env
    ports:
      - ${NLP_PORT:-50060}:8080
    volumes:
      - ./services/nlp/src/main/resources/models:/app/classes/models
    depends_on:
      - database
    networks:
      - tno
    healthcheck:
      test: curl -s -f http://localhost:8080/health || exit 1
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s

  search:
    image: tno:search
    profiles: ["service", "data", "elastic"]
    restart: on-failure:1
    container_name: tno-search
    build:
      context: services/elastic
    env_file:
      - services/elastic/.env
    ports:
      - ${NLP_PORT:-50060}:8080
    depends_on:
      - database
      - elastic
    networks:
      - tno
    healthcheck:
      test: curl -s -f http://localhost:8080/health || exit 1
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s

####################### Volumes Definition #######################
volumes:
  tno-database-data:
    name: tno-database-data
  tno-database-sdata:
    name: tno-database-sdata
  tno-elastic-data:
    name: tno-elastic-data
  tno-editor-node-cache:
    name: tno-editor-node-cache
  tno-subscriber-node-cache:
    name: tno-subscriber-node-cache

  tno-azure-storage-data:
    name: tno-azure-storage-data

# To inspect healthcheck
# docker inspect --format='{{json .State.Health}}' tno-nlp
