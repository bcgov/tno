apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: postgres-deploy
  annotations:
    openshift.io/display-name: PostgreSQL Database Server
    description: The World's Most Advanced Open Source Relational Database.
    tags: database,postgres
parameters:
  - name: APP_NAME
    displayName: Application Name
    description: The name of the application (e.g. api-editor.dev).
    required: true
    value: "postgres"

  - name: IMAGE
    displayName: Image
    description: The image name and path.
    required: true
    value: "registry.redhat.io/rhel8/postgresql-13"
  - name: IMAGE_TAG
    displayName: Image Tag
    description: The image tag used to specify which image you would like deployed.
    required: true
    value: "1-28"

  - name: APP_PORT
    displayName: Application Port
    description: The port used to communicate with the Pod
    value: "5432"

  - name: REPLICAS
    displayName: REPLICAS
    description: The number of StatefulSet replicas to use.
    required: true
    value: "1"
  - name: CPU_REQUEST
    displayName: "Requested Minimum Resources CPU Limit"
    description: "The requested minimum resources CPU limit (in cores) for this build."
    required: true
    value: 50m
  - name: CPU_LIMIT
    displayName: "Resources CPU Limit"
    description: "The resources CPU limit (in cores) for this build."
    required: true
    value: 150m
  - name: MEMORY_REQUEST
    displayName: "Requested Minimum Memory Limit"
    description: "Minimum requested amount of memory the container can use."
    required: true
    value: 50Mi
  - name: MEMORY_LIMIT
    displayName: "Memory Limit"
    description: "Maximum amount of memory the container can use."
    required: true
    value: 250Mi

objects:
  - apiVersion: v1
    kind: Service
    metadata:
      name: ${APP_NAME}
      labels:
        name: ${APP_NAME}
        app: ${APP_NAME}
    spec:
      ports:
        - name: tcp
          port: ${{APP_PORT}}
          protocol: TCP
          targetPort: ${{APP_PORT}}
      selector:
        app: ${APP_NAME}
        deploymentconfig: ${APP_NAME}
      sessionAffinity: None
      type: ClusterIP

  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      name: ${APP_NAME}
      labels:
        name: ${APP_NAME}
        app: ${APP_NAME}
    spec:
      replicas: ${{REPLICAS}}
      selector:
        app: ${APP_NAME}
      strategy:
        recreateParams:
          timeoutSeconds: 600
        resources: {}
        type: Recreate
      test: false
      triggers:
        - type: ConfigChange
      template:
        metadata:
          labels:
            app: ${APP_NAME}
        spec:
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          securityContext: {}
          terminationGracePeriodSeconds: 30
          volumes:
            - name: ${APP_NAME}
              persistentVolumeClaim:
                claimName: ${APP_NAME}
          containers:
            - name: ${APP_NAME}
              image: ${IMAGE}:${IMAGE_TAG}
              imagePullPolicy: IfNotPresent
              ports:
                - containerPort: 5432
                  protocol: TCP
              env:
                - name: POSTGRESQL_DATABASE
                  value: sonarqube
                - name: POSTGRESQL_USER
                  valueFrom:
                    secretKeyRef:
                      name: ${APP_NAME}
                      key: POSTGRESQL_USER
                - name: POSTGRESQL_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${APP_NAME}
                      key: POSTGRESQL_PASSWORD
                - name: POSTGRESQL_ADMIN_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${APP_NAME}
                      key: POSTGRESQL_ADMIN_PASSWORD
              resources:
                requests:
                  cpu: ${CPU_REQUEST}
                  memory: ${MEMORY_REQUEST}
                limits:
                  cpu: ${CPU_LIMIT}
                  memory: ${MEMORY_LIMIT}
              volumeMounts:
                - mountPath: /var/lib/pgsql/data
                  name: ${APP_NAME}
              securityContext:
                capabilities: {}
                privileged: false
              terminationMessagePath: /dev/termination-log
              livenessProbe:
                tcpSocket:
                  port: 5432
                initialDelaySeconds: 30
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 1
                failureThreshold: 3
              readinessProbe:
                exec:
                  command:
                    - /bin/sh
                    - "-i"
                    - "-c"
                    - >-
                      psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
                initialDelaySeconds: 5
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 1
                failureThreshold: 3
