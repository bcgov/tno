---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: api
  namespace: default
  annotations:
    description: Deploy API
    image.openshift.io/triggers: |-
      [
        {
          "from": {
            "kind": "ImageStreamTag",
            "namespace": " 9b301c-tools",
            "name": "api:dev"
          },
          "fieldPath": "spec.template.spec.containers[?(@.name==\"api\")].image",
          "paused": false
        },
      ]
  labels:
    name: api
    part-of: tno
    version: 1.0.0
    component: api
    managed-by: kustomize
    created-by: jeremy.foster
    cluster: api-cluster
spec:
  serviceName: api
  replicas: 1
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
    rollingParams:
      intervalSeconds: 1
      maxSurge: 25%
      maxUnavailable: 25%
      timeoutSeconds: 600
      updatePeriodSeconds: 1
  selector:
    matchLabels:
      statefulset: api-cluster
  triggers:
    - type: ConfigChange
  template:
    metadata:
      labels:
        part-of: tno
        component: api
        statefulset: api-cluster
    spec:
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccountName: tno
      terminationGracePeriodSeconds: 0
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: statefulset
                    operator: In
                    values:
                      - api-cluster
              topologyKey: "kubernetes.io/hostname"
      volumes:
        - name: api-storage
          persistentVolumeClaim:
            claimName: api-storage
        - name: ingest-storage
          persistentVolumeClaim:
            claimName: ingest-storage
      containers:
        - name: api
          image: image-registry.openshift-image-registry.svc:5000/9b301c-tools/api:dev
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
              protocol: TCP
          volumeMounts:
            - name: api-storage
              mountPath: /mnt/data
            - name: ingest-storage
              mountPath: /mnt/ingest
          resources:
            requests:
              cpu: 100m
              memory: 350Mi
          env:
            - name: ASPNETCORE_URLS
              value: http://+:8080
            - name: HubPath
              value: /hub

            - name: Logging__LogLevel__TNO
              value: Information

            - name: Storage__UploadPath
              value: /mnt/data
            - name: Storage__CapturePath
              value: /mnt/ingest

            - name: Keycloak__Authority
              valueFrom:
                configMapKeyRef:
                  name: keycloak
                  key: KEYCLOAK_AUTHORITY
            - name: Keycloak__Audience
              valueFrom:
                configMapKeyRef:
                  name: keycloak
                  key: KEYCLOAK_AUDIENCE
            - name: Keycloak__Issuer
              valueFrom:
                configMapKeyRef:
                  name: keycloak
                  key: KEYCLOAK_ISSUER
            - name: Keycloak__ClientId
              valueFrom:
                configMapKeyRef:
                  name: keycloak
                  key: KEYCLOAK_CLIENT_ID
            - name: Keycloak__ServiceAccount__Authority
              valueFrom:
                configMapKeyRef:
                  name: keycloak
                  key: KEYCLOAK_SERVICEACCOUNT_AUTHORITY
            - name: Keycloak__ServiceAccount__Secret
              valueFrom:
                secretKeyRef:
                  name: keycloak
                  key: KEYCLOAK_CLIENT_SECRET

            - name: Kafka__Consumer__GroupId
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name

            - name: ConnectionStrings__TNO
              valueFrom:
                configMapKeyRef:
                  name: api
                  key: CONNECTION_STRING
            - name: DB_POSTGRES_USERNAME
              valueFrom:
                secretKeyRef:
                  name: database
                  key: USERNAME
            - name: DB_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: database
                  key: PASSWORD

            - name: Elastic__Url
              valueFrom:
                configMapKeyRef:
                  name: api
                  key: ELASTIC_URIS
            - name: ELASTIC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: elastic
                  key: USERNAME
            - name: ELASTIC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: elastic
                  key: PASSWORD

            - name: Charts__Url
              value: "http://charts-api:8080"

            - name: Reporting__SubscriberAppUrl
              valueFrom:
                configMapKeyRef:
                  name: reporting-shared
                  key: REPORTING_SUBSCRIBER_URL
            - name: Reporting__ViewContentUrl
              valueFrom:
                configMapKeyRef:
                  name: reporting-shared
                  key: REPORTING_VIEW_CONTENT_URL
            - name: Reporting__RequestTranscriptUrl
              valueFrom:
                configMapKeyRef:
                  name: reporting-shared
                  key: REPORTING_REQUEST_TRANSCRIPT_URL

            # S3 Configuration
            - name: S3_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: s3-backup-credentials
                  key: S3_ACCESS_KEY
            - name: S3_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: s3-backup-credentials
                  key: S3_SECRET_KEY
            - name: S3_BUCKET_NAME
              valueFrom:
                secretKeyRef:
                  name: s3-backup-credentials
                  key: S3_BUCKET_NAME
            - name: S3_SERVICE_URL
              valueFrom:
                secretKeyRef:
                  name: s3-backup-credentials
                  key: S3_SERVICE_URL

            # CHES Configuration
            - name: CHES__From
              valueFrom:
                configMapKeyRef:
                  name: ches
                  key: CHES_FROM
            - name: CHES__EmailEnabled
              valueFrom:
                configMapKeyRef:
                  name: api
                  key: CHES_EMAIL_ENABLED
            - name: CHES__EmailAuthorized
              valueFrom:
                configMapKeyRef:
                  name: api
                  key: CHES_EMAIL_AUTHORIZED

            - name: CHES__AuthUrl
              valueFrom:
                configMapKeyRef:
                  name: ches
                  key: CHES_AUTH_URL
            - name: CHES__HostUri
              valueFrom:
                configMapKeyRef:
                  name: ches
                  key: CHES_HOST_URI
            - name: CHES__Username
              valueFrom:
                secretKeyRef:
                  name: ches
                  key: USERNAME
            - name: CHES__Password
              valueFrom:
                secretKeyRef:
                  name: ches
                  key: PASSWORD

          livenessProbe:
            httpGet:
              path: "/health"
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            timeoutSeconds: 30
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: "/health"
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            timeoutSeconds: 60
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 3
