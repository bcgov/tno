apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: build-all
  annotations:
    tekton.dev/displayName: Buildah Image
    tekton.dev/pipelines.minVersion: 0.17.0
    tekton.dev/tags: build
    description: |
      Using Buildah build a new image from source code and push the new images
      to the specified image registry.
      Only build the images that have been identified as updated by git.
  labels:
    name: build-all
    part-of: tno
    version: 1.0.0
    component: task
    managed-by: kustomize
spec:
  params:
    - default: .
      description: The root path to the git repo.
      name: CONTEXT
      type: string

    - name: IMAGE_REGISTRY
      description: The Root url of the image registry.
      default: image-registry.openshift-image-registry.svc:5000/9b301c-tools
    - name: IMAGE_TAG
      description: The tag given to the built image.
      type: string
      default: latest

    - name: BUILD
      description: Whether to force build a component, or all [*|all|[name]].
      default: "*"

    - name: STORAGE_DRIVER
      description: Set buildah storage driver
      default: vfs
  workspaces:
    - name: source
    - name: conditions
      mountPath: /data
    - name: build
      mountPath: /var/lib/containers/storage/vfs/dir
  steps:
    - name: build
      image: image-registry.apps.silver.devops.gov.bc.ca/9b301c-tools/buildah:latest
      securityContext:
        capabilities:
          add:
            - SETFCAP
        runAsUser: 0
      workingDir: $(workspaces.source.path)
      env:
        - name: IMAGE_REGISTRY_USER
          valueFrom:
            secretKeyRef:
              name: pipelines
              key: username
        - name: IMAGE_REGISTRY_PASS
          valueFrom:
            secretKeyRef:
              name: pipelines
              key: password
      resources:
        requests:
          memory: 4Gi
          cpu: 1000m
        limits:
          memory: 7Gi
          cpu: 2000m
      script: |
        #!/usr/bin/env bash
        # set -xe

        # export TMPDIR="$(workspaces.source.path)/tmp/buildah"
        # mkdir -p "${TMPDIR}"

        # Place config into environment variables.
        if test -f $(workspaces.conditions.path)/build.env; then
          export $(grep -v '^#' $(workspaces.conditions.path)/build.env | xargs)
        else
          echo 'Workspace conditions build.env not found'
          exit 1;
        fi

        # ***************************************************
        # An array of all the objects for the solution.
        # ***************************************************

        # Ingest Services
        declare -A COMPONENT0=(
          [id]="syndication"
          [image]="syndication-service"
          [context]=""
          [dockerfile]="/services/net/syndication/Dockerfile"
        )

        declare -A COMPONENT1=(
          [id]="filemonitor"
          [image]="filemonitor-service"
          [context]=""
          [dockerfile]="/services/net/filemonitor/Dockerfile"
        )

        declare -A COMPONENT2=(
          [id]="image"
          [image]="image-service"
          [context]=""
          [dockerfile]="/services/net/image/Dockerfile"
        )

        declare -A COMPONENT3=(
          [id]="contentmigration"
          [image]="contentmigration-service"
          [context]=""
          [dockerfile]="/services/net/contentmigration/Dockerfile"
        )

        # Processing Services

        declare -A COMPONENT4=(
          [id]="content"
          [image]="content-service"
          [context]=""
          [dockerfile]="/services/net/content/Dockerfile"
        )

        declare -A COMPONENT5=(
          [id]="indexing"
          [image]="indexing-service"
          [context]=""
          [dockerfile]="/services/net/indexing/Dockerfile"
        )

        declare -A COMPONENT6=(
          [id]="transcription"
          [image]="transcription-service"
          [context]=""
          [dockerfile]="/services/net/transcription/Dockerfile"
        )

        declare -A COMPONENT7=(
          [id]="nlp"
          [image]="nlp-service"
          [context]=""
          [dockerfile]="/services/net/nlp/Dockerfile"
        )

        declare -A COMPONENT8=(
          [id]="extract-quotes"
          [image]="extract-quotes-service"
          [context]=""
          [dockerfile]="/services/net/extract-quotes/Dockerfile"
        )

        declare -A COMPONENT9=(
          [id]="reporting"
          [image]="reporting-service"
          [context]=""
          [dockerfile]="/services/net/reporting/Dockerfile"
        )

        declare -A COMPONENT10=(
          [id]="notification"
          [image]="notification-service"
          [context]=""
          [dockerfile]="/services/net/notification/Dockerfile"
        )

        declare -A COMPONENT11=(
          [id]="scheduler"
          [image]="scheduler-service"
          [context]=""
          [dockerfile]="/services/net/scheduler/Dockerfile"
        )

        declare -A COMPONENT12=(
          [id]="folder-collection"
          [image]="folder-collection-service"
          [context]=""
          [dockerfile]="/services/net/folder-collection/Dockerfile"
        )

        declare -A COMPONENT13=(
          [id]="ffmpeg"
          [image]="ffmpeg-service"
          [context]=""
          [dockerfile]="/services/net/ffmpeg/Dockerfile"
        )

        declare -A COMPONENT14=(
          [id]="event-handler"
          [image]="event-handler-service"
          [context]=""
          [dockerfile]="/services/net/event-handler/Dockerfile"
        )

        # Applications

        declare -A COMPONENT15=(
          [id]="api"
          [image]="api"
          [context]=""
          [dockerfile]="/api/net/Dockerfile.openshift"
        )

        declare -A COMPONENT16=(
          [id]="charts-api"
          [image]="charts-api"
          [context]="/api/node"
          [dockerfile]="/Dockerfile.open"
        )

        declare -A COMPONENT17=(
          [id]="editor"
          [image]="editor"
          [context]="/app/editor"
          [dockerfile]="/Dockerfile.open"
        )

        declare -A COMPONENT18=(
          [id]="subscriber"
          [image]="subscriber"
          [context]="/app/subscriber"
          [dockerfile]="/Dockerfile.open"
        )

        declare -A COMPONENT19=(
          [id]="db"
          [image]="db-migration"
          [context]="/libs/net"
          [dockerfile]="/Dockerfile"
        )

        declare -A COMPONENT20=(
          [id]="elastic"
          [image]="elastic-migration"
          [context]=""
          [dockerfile]="/tools/elastic/migration/Dockerfile"
        )

        declare -n component;

        # Loop through each component and build if required.
        for component in ${!COMPONENT@}; do
          # Dynamic variable to control what will be built.
          TVAR="BUILD_${component[id]}"
          COMPONENT=${TVAR//\-/_}
          COMPONENT=${COMPONENT^^}
          echo $COMPONENT=${!COMPONENT}

          # Check if this image needs to be built.
          # If the component was auto built by the build step, or all components are to built, or a specific component was requested to be built.
          if [ "${!COMPONENT}" = true ] || [ "$(params.BUILD)" = "all" ] || [ "$(params.BUILD)" = "${component[id]}" ]; then
            echo "============================"
            echo "= Building ${component[id]}"
            if [ ! -z "$IMAGE_REGISTRY_USER" ];  then
              buildah login \
                -u $IMAGE_REGISTRY_USER \
                -p $IMAGE_REGISTRY_PASS $(params.IMAGE_REGISTRY) > /dev/null
            fi

            # Build the image.
            buildah --storage-driver=$(params.STORAGE_DRIVER) bud \
              --no-cache -f ${component[dockerfile]} -t $(params.IMAGE_REGISTRY)/${component[image]}:$(params.IMAGE_TAG) --isolation chroot $(params.CONTEXT)${component[context]}

            # Push the image to the registry.
            buildah --storage-driver=$(params.STORAGE_DRIVER) push $(params.IMAGE_REGISTRY)/${component[image]}:$(params.IMAGE_TAG)
          else
            echo "============================"
            echo "= Not building ${component[id]}"
          fi
        done
