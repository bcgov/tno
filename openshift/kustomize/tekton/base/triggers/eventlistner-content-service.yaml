---
apiVersion: triggers.tekton.dev/v1alpha1
kind: EventListener
metadata:
  name: services-webhook
spec:
  serviceAccountName: pipeline
  triggers:
    - name: content-service-listener
      bindings:
        - ref: git-dev-service
      template:
        ref: git-app-service
      interceptors:
        - ref:
            name: "github"
            kind: ClusterInterceptor
            apiVersion: triggers.tekton.dev
          params:
          - name: "secretRef"
            value:
              secretName: tno-webhook-services
              secretKey: WebHookSecretKey
          - name: "eventTypes"
            value: ["push"]
        - ref:
            name: cel
          params:
          - name: filter
            value: >-
              body.ref == 'refs/heads/dev'
              && (body.commits.exists(c, c.added.exists(m, m.startsWith('services/net/content')))
                || body.commits.exists(c, c.modified.exists(m, m.startsWith('services/net/content')))
                || body.commits.exists(c, c.removed.exists(m, m.startsWith('services/net/content')))
                || body.head_commit.added.exists(m, m.startsWith('services/net/content'))
                || body.head_commit.modified.exists(m, m.startsWith('services/net/content'))
                || body.head_commit.removed.exists(m, m.startsWith('services/net/content')))
          - name: "overlays"
            value:
            - key: branch
              expression: "body.default_branch"
            - key: SERVICE_NAME
              expression: "content"

    - name: filecopy-service-listener
      bindings:
        - ref: git-dev-service
      template:
        ref: git-app-service
      interceptors:
        - ref:
            name: "github"
            kind: ClusterInterceptor
            apiVersion: triggers.tekton.dev
          params:
          - name: "secretRef"
            value:
              secretName: tno-webhook
              secretKey: webhook
          - name: "eventTypes"
            value: ["push"]
        - ref:
            name: cel
          params:
          - name: filter
            value: >-
              body.ref == 'refs/heads/dev'
              && (body.commits.exists(c, c.added.exists(m, m.startsWith('services/net/filecopy')))
                || body.commits.exists(c, c.modified.exists(m, m.startsWith('services/net/filecopy')))
                || body.commits.exists(c, c.removed.exists(m, m.startsWith('services/net/filecopy')))
                || body.head_commit.added.exists(m, m.startsWith('services/net/filecopy'))
                || body.head_commit.modified.exists(m, m.startsWith('services/net/filecopy'))
                || body.head_commit.removed.exists(m, m.startsWith('services/net/filecopy')))
          - name: "overlays"
            value:
            - key: branch
              expression: "body.default_branch"
            - key: SERVICE_NAME
              expression: "filecopy"

    - name: filemonitor-service-listener
      bindings:
        - ref: git-dev-service
      template:
        ref: git-app-service
      interceptors:
        - ref:
            name: "github"
            kind: ClusterInterceptor
            apiVersion: triggers.tekton.dev
          params:
          - name: "secretRef"
            value:
              secretName: tno-webhook
              secretKey: webhook
          - name: "eventTypes"
            value: ["push"]
        - ref:
            name: cel
          params:
          - name: filter
            value: >-
              body.ref == 'refs/heads/dev'
              && (body.commits.exists(c, c.added.exists(m, m.startsWith('services/net/filemonitor')))
                || body.commits.exists(c, c.modified.exists(m, m.startsWith('services/net/filemonitor')))
                || body.commits.exists(c, c.removed.exists(m, m.startsWith('services/net/filemonitor')))
                || body.head_commit.added.exists(m, m.startsWith('services/net/filemonitor'))
                || body.head_commit.modified.exists(m, m.startsWith('services/net/filemonitor'))
                || body.head_commit.removed.exists(m, m.startsWith('services/net/filemonitor')))
          - name: "overlays"
            value:
            - key: branch
              expression: "body.default_branch"
            - key: SERVICE_NAME
              expression: "filemonitor"

    - name: image-service-listener
      bindings:
        - ref: git-dev-service
      template:
        ref: git-app-service
      interceptors:
        - ref:
            name: "github"
            kind: ClusterInterceptor
            apiVersion: triggers.tekton.dev
          params:
          - name: "secretRef"
            value:
              secretName: tno-webhook
              secretKey: webhook
          - name: "eventTypes"
            value: ["push"]
        - ref:
            name: cel
          params:
          - name: filter
            value: >-
              body.ref == 'refs/heads/dev'
              && (body.commits.exists(c, c.added.exists(m, m.startsWith('services/net/image')))
                || body.commits.exists(c, c.modified.exists(m, m.startsWith('services/net/image')))
                || body.commits.exists(c, c.removed.exists(m, m.startsWith('services/net/image')))
                || body.head_commit.added.exists(m, m.startsWith('services/net/image'))
                || body.head_commit.modified.exists(m, m.startsWith('services/net/image'))
                || body.head_commit.removed.exists(m, m.startsWith('services/net/image')))
          - name: "overlays"
            value:
            - key: branch
              expression: "body.default_branch"
            - key: SERVICE_NAME
              expression: "image"
  
    - name: indexing-service-listener
      bindings:
        - ref: git-dev-service
      template:
        ref: git-app-service
      interceptors:
        - ref:
            name: "github"
            kind: ClusterInterceptor
            apiVersion: triggers.tekton.dev
          params:
          - name: "secretRef"
            value:
              secretName: tno-webhook
              secretKey: webhook
          - name: "eventTypes"
            value: ["push"]
        - ref:
            name: cel
          params:
          - name: filter
            value: >-
              body.ref == 'refs/heads/dev'
              && (body.commits.exists(c, c.added.exists(m, m.startsWith('services/net/indexing')))
                || body.commits.exists(c, c.modified.exists(m, m.startsWith('services/net/indexing')))
                || body.commits.exists(c, c.removed.exists(m, m.startsWith('services/net/indexing')))
                || body.head_commit.added.exists(m, m.startsWith('services/net/indexing'))
                || body.head_commit.modified.exists(m, m.startsWith('services/net/indexing'))
                || body.head_commit.removed.exists(m, m.startsWith('services/net/indexing')))
          - name: "overlays"
            value:
            - key: branch
              expression: "body.default_branch"
            - key: SERVICE_NAME
              expression: "indexing"
              
    - name: nlp-service-listener
      bindings:
        - ref: git-dev-service
      template:
        ref: git-app-service
      interceptors:
        - ref:
            name: "github"
            kind: ClusterInterceptor
            apiVersion: triggers.tekton.dev
          params:
          - name: "secretRef"
            value:
              secretName: tno-webhook
              secretKey: webhook
          - name: "eventTypes"
            value: ["push"]
        - ref:
            name: cel
          params:
          - name: filter
            value: >-
              body.ref == 'refs/heads/dev'
              && (body.commits.exists(c, c.added.exists(m, m.startsWith('services/net/nlp')))
                || body.commits.exists(c, c.modified.exists(m, m.startsWith('services/net/nlp')))
                || body.commits.exists(c, c.removed.exists(m, m.startsWith('services/net/nlp')))
                || body.head_commit.added.exists(m, m.startsWith('services/net/nlp'))
                || body.head_commit.modified.exists(m, m.startsWith('services/net/nlp'))
                || body.head_commit.removed.exists(m, m.startsWith('services/net/nlp')))
          - name: "overlays"
            value:
            - key: branch
              expression: "body.default_branch"
            - key: SERVICE_NAME
              expression: "nlp"
              
    - name: notification-service-listener
      bindings:
        - ref: git-dev-service
      template:
        ref: git-app-service
      interceptors:
        - ref:
            name: "github"
            kind: ClusterInterceptor
            apiVersion: triggers.tekton.dev
          params:
          - name: "secretRef"
            value:
              secretName: tno-webhook
              secretKey: webhook
          - name: "eventTypes"
            value: ["push"]
        - ref:
            name: cel
          params:
          - name: filter
            value: >-
              body.ref == 'refs/heads/dev'
              && (body.commits.exists(c, c.added.exists(m, m.startsWith('services/net/notification')))
                || body.commits.exists(c, c.modified.exists(m, m.startsWith('services/net/notification')))
                || body.commits.exists(c, c.removed.exists(m, m.startsWith('services/net/notification')))
                || body.head_commit.added.exists(m, m.startsWith('services/net/notification'))
                || body.head_commit.modified.exists(m, m.startsWith('services/net/notification'))
                || body.head_commit.removed.exists(m, m.startsWith('services/net/notification')))
          - name: "overlays"
            value:
            - key: branch
              expression: "body.default_branch"
            - key: SERVICE_NAME
              expression: "notification"
  
    - name: reporting-service-listener
      bindings:
        - ref: git-dev-service
      template:
        ref: git-app-service
      interceptors:
        - ref:
            name: "github"
            kind: ClusterInterceptor
            apiVersion: triggers.tekton.dev
          params:
          - name: "secretRef"
            value:
              secretName: tno-webhook
              secretKey: webhook
          - name: "eventTypes"
            value: ["push"]
        - ref:
            name: cel
          params:
          - name: filter
            value: >-
              body.ref == 'refs/heads/dev'
              && (body.commits.exists(c, c.added.exists(m, m.startsWith('services/net/reporting')))
                || body.commits.exists(c, c.modified.exists(m, m.startsWith('services/net/reporting')))
                || body.commits.exists(c, c.removed.exists(m, m.startsWith('services/net/reporting')))
                || body.head_commit.added.exists(m, m.startsWith('services/net/reporting'))
                || body.head_commit.modified.exists(m, m.startsWith('services/net/reporting'))
                || body.head_commit.removed.exists(m, m.startsWith('services/net/reporting')))
          - name: "overlays"
            value:
            - key: branch
              expression: "body.default_branch"
            - key: SERVICE_NAME
              expression: "reporting"
      
    - name: scheduler-service-listener
      bindings:
        - ref: git-dev-service
      template:
        ref: git-app-service
      interceptors:
        - ref:
            name: "github"
            kind: ClusterInterceptor
            apiVersion: triggers.tekton.dev
          params:
          - name: "secretRef"
            value:
              secretName: tno-webhook
              secretKey: webhook
          - name: "eventTypes"
            value: ["push"]
        - ref:
            name: cel
          params:
          - name: filter
            value: >-
              body.ref == 'refs/heads/dev'
              && (body.commits.exists(c, c.added.exists(m, m.startsWith('services/net/scheduler')))
                || body.commits.exists(c, c.modified.exists(m, m.startsWith('services/net/scheduler')))
                || body.commits.exists(c, c.removed.exists(m, m.startsWith('services/net/scheduler')))
                || body.head_commit.added.exists(m, m.startsWith('services/net/scheduler'))
                || body.head_commit.modified.exists(m, m.startsWith('services/net/scheduler'))
                || body.head_commit.removed.exists(m, m.startsWith('services/net/scheduler')))
          - name: "overlays"
            value:
            - key: branch
              expression: "body.default_branch"
            - key: SERVICE_NAME
              expression: "scheduler"
      
    - name: syndication-service-listener
      bindings:
        - ref: git-dev-service
      template:
        ref: git-app-service
      interceptors:
        - ref:
            name: "github"
            kind: ClusterInterceptor
            apiVersion: triggers.tekton.dev
          params:
          - name: "secretRef"
            value:
              secretName: tno-webhook
              secretKey: webhook
          - name: "eventTypes"
            value: ["push"]
        - ref:
            name: cel
          params:
          - name: filter
            value: >-
              body.ref == 'refs/heads/dev'
              && (body.commits.exists(c, c.added.exists(m, m.startsWith('services/net/syndication')))
                || body.commits.exists(c, c.modified.exists(m, m.startsWith('services/net/syndication')))
                || body.commits.exists(c, c.removed.exists(m, m.startsWith('services/net/syndication')))
                || body.head_commit.added.exists(m, m.startsWith('services/net/syndication'))
                || body.head_commit.modified.exists(m, m.startsWith('services/net/syndication'))
                || body.head_commit.removed.exists(m, m.startsWith('services/net/syndication')))
          - name: "overlays"
            value:
            - key: branch
              expression: "body.default_branch"
            - key: SERVICE_NAME
              expression: "syndication"
      
    - name: transcription-service-listener
      bindings:
        - ref: git-dev-service
      template:
        ref: git-app-service
      interceptors:
        - ref:
            name: "github"
            kind: ClusterInterceptor
            apiVersion: triggers.tekton.dev
          params:
          - name: "secretRef"
            value:
              secretName: tno-webhook
              secretKey: webhook
          - name: "eventTypes"
            value: ["push"]
        - ref:
            name: cel
          params:
          - name: filter
            value: >-
              body.ref == 'refs/heads/dev'
              && (body.commits.exists(c, c.added.exists(m, m.startsWith('services/net/transcription')))
                || body.commits.exists(c, c.modified.exists(m, m.startsWith('services/net/transcription')))
                || body.commits.exists(c, c.removed.exists(m, m.startsWith('services/net/transcription')))
                || body.head_commit.added.exists(m, m.startsWith('services/net/transcription'))
                || body.head_commit.modified.exists(m, m.startsWith('services/net/transcription'))
                || body.head_commit.removed.exists(m, m.startsWith('services/net/transcription')))
          - name: "overlays"
            value:
            - key: branch
              expression: "body.default_branch"
            - key: SERVICE_NAME
              expression: "transcription"
      
---
apiVersion: triggers.tekton.dev/v1beta1
kind: TriggerBinding
metadata:
  name: git-dev-service
spec:
  params:
    - name: GIT_URL
      value: https://github.com/$(body.repository.full_name)
    - name: GIT_REF
      value: $(body.head_commit.id)
    - name: VERSION
      value: latest-$(extensions.truncated_sha)
    - name: DEPLOY_TO
      value: $(extensions.branch)
    - name: SERVICE_NAME
      value: $(extensions.SERVICE_NAME)
---
apiVersion: triggers.tekton.dev/v1beta1
kind: TriggerTemplate
metadata:
  name: git-app-service
spec:
  params:
    - name: GIT_SOURCE
      description: Identify the git source
    - name: VERSION
      description: The version to tag the image with
    - name: DEPLOY_TO
      description: The environment to deploy to
    - name: SERVICE_NAME
  resourcetemplates:
    - apiVersion: tekton.dev/v1beta1
      kind: PipelineRun
      metadata:
        generateName: buildah-service-$(tt.params.VERSION)-
        annotations:
          description: >-
            Build an docker image from a GIT repository using an existing BuildConfig.
            Then deploy to the specified environment.
          tags: "oc,git,docker,build,deploy"
        labels:
          name: buildah-service-$(tt.params.VERSION)
          part-of: tno
          version: $(tt.params.VERSION)
          component: pipeline
          managed-by: kustomize
          tekton.dev/pipeline: buildah-service
      spec:
        pipelineRef:
          name: buildah-service
        serviceAccountName: pipeline
        timeout: 1h45m0s
        params:
          - name: GIT_REF
            value: $(tt.params.GIT_SOURCE)
          - name: IMAGE_TAG
            value: $(tt.params.VERSION)
          - name: CONTEXT
            value: tno
          - name: DEPLOY_TO
            value: $(tt.params.DEPLOY_TO)
          - name: SERVICE_NAME
            value: $(tt.params.SERVICE_NAME)
          - name: PROJECT_SHORTNAME
            value: 9b301c
        workspaces:
          - name: source
            persistentVolumeClaim:
              claimName: pipelines
          - name: conditions
            volumeClaimTemplate:
              spec:
                accessModes:
                  - ReadWriteOnce
                resources:
                  requests:
                    storage: 50Mi
                storageClassName: netapp-file-standard
                volumeMode: Filesystem
          - name: build
            emptyDir: {}
          - name: owasp-settings
            emptyDir: {}

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: services-webhook
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  rules:
    - host: tno-tekton.apps.silver.devops.gov.bc.ca
      http:
        paths:
          - path: /hooks-services
            pathType: Exact
            backend:
              service:
                name: el-services-webhook
                port:
                  number: 8080

---
kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: services-webhook
spec:
  host: tno-tekton.apps.silver.devops.gov.bc.ca
  path: /hooks-services
  to:
    kind: Service
    name: el-services-webhook
    weight: 100
  port:
    targetPort: http-listener
  wildcardPolicy: None