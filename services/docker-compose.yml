services:
  ####################### Ingestion Services #######################
  syndication:
    image: tno:syndication
    profiles:
      - all
      - service
    restart: "no"
    container_name: tno-syndication
    build:
      context: ./
      dockerfile: services/net/syndication/Dockerfile
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 250M
        reservations:
          cpus: '0.05'
          memory: 50M
    env_file:
      - services/net/syndication/.env
    ports:
      - ${SYNDICATION_PORT:-40020}:8081
    depends_on:
      - api
      - broker
    networks:
      - tno
    healthcheck:
      test: curl -s -f http://localhost:8081/health || exit 1
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s

  capture:
    image: tno:capture
    profiles:
      - all
      - service
    restart: "no"
    container_name: tno-capture
    build:
      context: ./
      dockerfile: services/net/capture/Dockerfile
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 250M
        reservations:
          cpus: '0.05'
          memory: 50M
    env_file:
      - services/net/capture/.env
    ports:
      - ${CAPTURE_PORT:-40021}:8081
    depends_on:
      - api
      - broker
    networks:
      - tno
    volumes:
      - tno-av-data:/data
    healthcheck:
      test: curl -s -f http://localhost:8081/health || exit 1
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s

  clip:
    image: tno:clip
    profiles:
      - all
      - service
    restart: "no"
    container_name: tno-clip
    build:
      context: ./
      dockerfile: services/net/clip/Dockerfile
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 250M
        reservations:
          cpus: '0.05'
          memory: 50M
    env_file:
      - services/net/clip/.env
    ports:
      - ${CLIP_PORT:-40022}:8081
    depends_on:
      - api
      - broker
    networks:
      - tno
    volumes:
      - tno-av-data:/data
    healthcheck:
      test: curl -s -f http://localhost:8081/health || exit 1
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s

  image:
    image: tno:image
    profiles:
      - all
      - service
    restart: "no"
    container_name: tno-image
    build:
      context: ./
      dockerfile: services/net/image/Dockerfile
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 250M
        reservations:
          cpus: '0.05'
          memory: 50M
    env_file:
      - services/net/image/.env
    ports:
      - ${IMAGE_PORT:-40023}:8081
    depends_on:
      - api
      - broker
    networks:
      - tno
    volumes:
      - tno-av-data:/data
    healthcheck:
      test: curl -s -f http://localhost:8081/health || exit 1
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s

  filemonitor:
    image: tno:filemonitor
    profiles:
      - all
      - service
    restart: "no"
    container_name: tno-filemonitor
    build:
      context: ./
      dockerfile: services/net/filemonitor/Dockerfile
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 250M
        reservations:
          cpus: '0.05'
          memory: 50M
    env_file:
      - services/net/filemonitor/.env
    ports:
      - ${FILE_PORT:-40024}:8081
    depends_on:
      - api
      - broker
    networks:
      - tno
    volumes:
      - tno-av-data:/data
    healthcheck:
      test: curl -s -f http://localhost:8081/health || exit 1
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s

  content:
    image: tno:content
    profiles:
      - all
      - service
    restart: "no"
    container_name: tno-content
    build:
      context: ./
      dockerfile: services/net/content/Dockerfile
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 250M
        reservations:
          cpus: '0.05'
          memory: 50M
    env_file:
      - services/net/content/.env
    ports:
      - ${CONTENT_PORT:-40025}:8081
    depends_on:
      - api
      - broker
    networks:
      - tno
    volumes:
      - tno-av-data:/data
    healthcheck:
      test: curl -s -f http://localhost:8081/health || exit 1
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s

  contentmigration:
    image: tno:contentmigration
    profiles:
      - all
      - service
    restart: "no"
    container_name: tno-contentmigration
    build:
      context: ./
      dockerfile: services/net/contentmigration/Dockerfile
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 250M
        reservations:
          cpus: '0.05'
          memory: 50M
    env_file:
      - services/net/contentmigration/.env
    ports:
      - ${CONTENTMIGRATION_PORT:-40032}:8081
    depends_on:
      - api
      - broker
    networks:
      - tno
    volumes:
      - tno-av-data:/data
    healthcheck:
      test: curl -s -f http://localhost:8081/health || exit 1
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s

  indexing:
    image: tno:indexing
    profiles:
      - all
      - service
      - main
    restart: "no"
    container_name: tno-indexing
    build:
      context: ./
      dockerfile: services/net/indexing/Dockerfile
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 250M
        reservations:
          cpus: '0.05'
          memory: 50M
    env_file:
      - services/net/indexing/.env
    ports:
      - ${INDEXING_PORT:-40026}:8081
    depends_on:
      - api
      - elastic
      - broker
    networks:
      - tno
    healthcheck:
      test: curl -s -f http://localhost:8081/health || exit 1
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s

  transcription:
    image: tno:transcription
    profiles:
      - all
      - service
    restart: "no"
    container_name: tno-transcription
    build:
      context: ./
      dockerfile: services/net/transcription/Dockerfile
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 250M
        reservations:
          cpus: '0.05'
          memory: 50M
    env_file:
      - services/net/transcription/.env
    ports:
      - ${TRANSCRIPTION_PORT:-40027}:8081
    depends_on:
      - api
      - broker
    networks:
      - tno
    volumes:
      - tno-api-data:/data
    healthcheck:
      test: curl -s -f http://localhost:8081/health || exit 1
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s

  nlp:
    image: tno:nlp
    profiles:
      - all
      - service
    restart: "no"
    container_name: tno-nlp
    build:
      context: ./
      dockerfile: services/net/nlp/Dockerfile
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 250M
        reservations:
          cpus: '0.05'
          memory: 50M
    env_file:
      - services/net/nlp/.env
    ports:
      - ${NLP_PORT:-40028}:8081
    depends_on:
      - api
      - broker
    networks:
      - tno
    healthcheck:
      test: curl -s -f http://localhost:8081/health || exit 1
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s

  filecopy:
    image: tno:filecopy
    profiles:
      - all
      - service
    restart: "no"
    container_name: tno-filecopy
    build:
      context: ./
      dockerfile: services/net/filecopy/Dockerfile
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 250M
        reservations:
          cpus: '0.05'
          memory: 50M
    env_file:
      - services/net/filecopy/.env
    ports:
      - ${FILECOPY_PORT:-40029}:8081
    depends_on:
      - api
      - broker
    networks:
      - tno
    volumes:
      - tno-av-data:/data
    healthcheck:
      test: curl -s -f http://localhost:8081/health || exit 1
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s

  notification:
    image: tno:notification
    profiles:
      - all
      - service
    restart: "no"
    container_name: tno-notification
    build:
      context: ./
      dockerfile: services/net/notification/Dockerfile
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 250M
        reservations:
          cpus: '0.05'
          memory: 50M
    env_file:
      - services/net/notification/.env
    ports:
      - ${NOTIFICATION_PORT:-40030}:8081
    depends_on:
      - api
      - broker
    networks:
      - tno
    healthcheck:
      test: curl -s -f http://localhost:8081/health || exit 1
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s

  reporting:
    image: tno:reporting
    profiles:
      - all
      - service
    restart: "no"
    container_name: tno-reporting
    build:
      context: ./
      dockerfile: services/net/reporting/Dockerfile
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 250M
        reservations:
          cpus: '0.05'
          memory: 50M
    env_file:
      - services/net/reporting/.env
    ports:
      - ${REPORTING_PORT:-40031}:8081
    depends_on:
      - api
      - broker
    networks:
      - tno
    healthcheck:
      test: curl -s -f http://localhost:8081/health || exit 1
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s

  folder-collection:
    image: tno:folder-collection
    profiles:
      - all
      - service
    restart: "no"
    container_name: tno-folder-collection
    build:
      context: ./
      dockerfile: services/net/folder-collection/Dockerfile
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 250M
        reservations:
          cpus: '0.05'
          memory: 50M
    env_file:
      - services/net/folder-collection/.env
    ports:
      - ${FOLDER_COLLECTION_PORT:-40033}:8081
    depends_on:
      - api
      - broker
    networks:
      - tno
    healthcheck:
      test: curl -s -f http://localhost:8081/health || exit 1
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s


  extract-quotes:
    image: tno:extract-quotes
    profiles:
      - all
      - service
    restart: "no"
    container_name: tno-extract-quotes
    build:
      context: ./
      dockerfile: services/net/extract-quotes/Dockerfile
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 250M
        reservations:
          cpus: '0.05'
          memory: 50M
    env_file:
      - services/net/extract-quotes/.env
    ports:
      - ${EXTRACT_QUOTES_PORT:-40037}:8081
    depends_on:
      - api
      - broker
    networks:
      - tno

  ffmpeg:
    image: tno:ffmpeg
    profiles:
      - all
      - service
    restart: "no"
    container_name: tno-ffmpeg
    build:
      context: ./
      dockerfile: services/net/ffmpeg/Dockerfile
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.05'
          memory: 100M
    env_file:
      - services/net/ffmpeg/.env
    ports:
      - ${FFMPEG_PORT:-40034}:8081
    depends_on:
      - api
      - broker
    networks:
      - tno
    volumes:
      - tno-api-data:/data
    healthcheck:
      test: curl -s -f http://localhost:8081/health || exit 1
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s

  scheduler:
    image: tno:scheduler
    profiles:
      - all
      - service
    restart: "no"
    container_name: tno-scheduler
    build:
      context: ./
      dockerfile: services/net/scheduler/Dockerfile
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 250M
        reservations:
          cpus: '0.05'
          memory: 50M
    env_file:
      - services/net/scheduler/.env
    ports:
      - ${SCHEDULER_PORT:-40035}:8081
    depends_on:
      - api
      - broker
    networks:
      - tno
    healthcheck:
      test: curl -s -f http://localhost:8081/health || exit 1
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s

  event-handler:
    image: tno:event-handler
    profiles:
      - all
      - service
    restart: "no"
    container_name: tno-event-handler
    build:
      context: ./
      dockerfile: services/net/event-handler/Dockerfile
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 250M
        reservations:
          cpus: '0.05'
          memory: 50M
    env_file:
      - services/net/event-handler/.env
    ports:
      - ${EVENTHANDLER_PORT:-40036}:8081
    depends_on:
      - api
      - broker
    networks:
      - tno
    healthcheck:
      test: curl -s -f http://localhost:8081/health || exit 1
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s
