kind: Template
apiVersion: v1
metadata:
  name: postgres-deploy
  annotations:
    openshift.io/display-name: PostgreSQL Database Server
    description: The World's Most Advanced Open Source Relational Database.
    tags: tno,database,postgres
parameters:
  - name: APP_NAME
    displayName: "App Name"
    description: "The name of the application (grouped)."
    required: true
    value: "tno"
  - name: GROUP_NAME
    displayName: "Component Role Name"
    description: "The name of the application component role [app, api, database]"
    required: true
    value: "database"
  - name: PROJECT_NAMESPACE
    displayName: "OpenShift Project Namespace"
    description: "The namespace of the OpenShift project containing the application."
    required: true
    value: "9b301c"
  - name: ENV_NAME
    displayName: "Environment name"
    description: "The name for this environment [dev, test, prod]"
    required: true
    value: "dev"
  - name: INSTANCE
    displayName: "Unique Identifier"
    description: "A unique identifier to allow for multiple instances (i.e. '-01')."
    value: ""

  - name: IMAGE_TAG
    displayName: "Source Image Tag"
    description: "The tag given to the built image that will be deployed."
    required: true
    value: "latest"

  - name: POSTGRESQL_PORT
    displayName: "Database container port"
    description: "The port to communicate with the database."
    required: true
    value: "5432"
  - name: POSTGRESQL_DATABASE
    displayName: "Solution Database Name"
    description: "The name of the solution database that will be created."
    required: true
    value: "tno"
  - name: KEYCLOAK_DATABASE
    displayName: "Keycloak Database Name"
    description: "The name of the keycloak database that will be created."
    required: true
    value: "keycloak"

  - name: CPU_REQUEST
    displayName: "Requested Minimum Resources CPU Limit"
    description: "The requested minimum resources CPU limit (in cores) for this build."
    required: true
    value: 100m
  - name: CPU_LIMIT
    displayName: "Resources CPU Limit"
    description: "The resources CPU limit (in cores) for this build."
    required: true
    value: 1000m
  - name: MEMORY_REQUEST
    displayName: "Requested Minimum Memory Limit"
    description: "Minimum requested amount of memory the container can use."
    required: true
    value: 250Mi
  - name: MEMORY_LIMIT
    displayName: "Memory Limit"
    description: "Maximum amount of memory the container can use."
    required: true
    value: 500Mi
objects:
  # Expose the database port to the pod.
  - kind: Service
    apiVersion: v1
    metadata:
      name: ${APP_NAME}-${GROUP_NAME}${INSTANCE}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      annotations:
        description: Exposes the database server
      labels:
        name: ${APP_NAME}-${GROUP_NAME}${INSTANCE}
        app: ${APP_NAME}
        role: ${GROUP_NAME}
    spec:
      ports:
        - name: ${POSTGRESQL_PORT}-tcp
          protocol: TCP
          port: ${{POSTGRESQL_PORT}}
          targetPort: ${{POSTGRESQL_PORT}}
      selector:
        name: ${APP_NAME}-${GROUP_NAME}${INSTANCE}
      type: ClusterIP
      sessionAffinity: None

  # Configure how the database is deployed to the pod.
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: ${APP_NAME}-${GROUP_NAME}${INSTANCE}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      annotations:
        description: Defines how to deploy the database server
      labels:
        name: ${APP_NAME}-${GROUP_NAME}${INSTANCE}
        app: ${APP_NAME}
        role: ${GROUP_NAME}
    spec:
      strategy:
        type: Recreate
      recreateParams:
        pre: {}
        mid: {}
        post: {}
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - ${APP_NAME}-${GROUP_NAME}${INSTANCE}
            from:
              kind: ImageStreamTag
              namespace: "${PROJECT_NAMESPACE}-tools"
              name: ${APP_NAME}-${GROUP_NAME}:${IMAGE_TAG}
      replicas: 1
      selector:
        name: ${APP_NAME}-${GROUP_NAME}${INSTANCE}
      template:
        metadata:
          name: ${APP_NAME}-${GROUP_NAME}${INSTANCE}
          labels:
            name: ${APP_NAME}-${GROUP_NAME}${INSTANCE}
            app: ${APP_NAME}
            role: ${GROUP_NAME}
        spec:
          volumes:
            - name: db-data
              persistentVolumeClaim:
                claimName: ${APP_NAME}-${GROUP_NAME}${INSTANCE}
            - name: backup
              persistentVolumeClaim:
                claimName: ${APP_NAME}-${GROUP_NAME}-backup
          containers:
            - name: ${APP_NAME}-${GROUP_NAME}${INSTANCE}
              image: ""
              ports:
                - containerPort: ${{POSTGRESQL_PORT}}
                  protocol: TCP
              env:
                - name: POSTGRESQL_USER
                  valueFrom:
                    secretKeyRef:
                      name: ${APP_NAME}-${GROUP_NAME}${INSTANCE}
                      key: POSTGRESQL_USER
                - name: POSTGRESQL_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${APP_NAME}-${GROUP_NAME}${INSTANCE}
                      key: POSTGRESQL_PASSWORD
                - name: POSTGRESQL_ADMIN_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${APP_NAME}-${GROUP_NAME}${INSTANCE}
                      key: POSTGRESQL_ADMIN_PASSWORD
                - name: POSTGRESQL_DATABASE
                  value: ${POSTGRESQL_DATABASE}
                - name: KEYCLOAK_DATABASE
                  value: ${KEYCLOAK_DATABASE}
              resources:
                limits:
                  cpu: ${CPU_LIMIT}
                  memory: ${MEMORY_LIMIT}
                requests:
                  cpu: "${CPU_REQUEST}"
                  memory: "${MEMORY_REQUEST}"
              volumeMounts:
                - name: db-data
                  mountPath: /var/lib/postgresql/data
                - name: backup
                  mountPath: /backups
              readinessProbe:
                initialDelaySeconds: 5
                timeoutSeconds: 5
                failureThreshold: 4
                exec:
                  command:
                    - "/usr/libexec/check-container"
              livenessProbe:
                initialDelaySeconds: 5
                timeoutSeconds: 5
                failureThreshold: 4
                exec:
                  command:
                    - "/usr/libexec/check-container"
                    - "--live"
