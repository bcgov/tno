kind: Template
apiVersion: v1
metadata:
  name: database-backup-deploy
  annotations:
    openshift.io/display-name: Database Backup Deploy Template
    description: A pod that runs scheduled database backups with chron jobs.
    tags: tno,database,backup
parameters:
  - name: APP_NAME
    displayName: "App Name"
    description: "The name of the application (grouped)."
    required: true
    value: "tno"
  - name: GROUP_NAME
    displayName: "Component Group Name"
    description: "The name of the application component (e.g api, app, database)."
    required: true
    value: "backup"
  - name: PROJECT_NAMESPACE
    displayName: "OpenShift Project Namespace"
    description: "The namespace of the OpenShift project containing the application."
    required: true
    value: "9b301c"
  - name: ENV_NAME
    displayName: "Environment name"
    description: "The name for this environment [dev, test, prod, tools]"
    required: true
    value: "dev"

  - name: IMAGE_TAG
    displayName: Environment TAG name
    description: The TAG name for this environment, e.g., dev, test, prod
    required: true
    value: "dev"

  - name: DATABASE_GROUP_NAME
    displayName: Database Role Name
    description: The name of the database service account role name (i.e. database).
    required: true
    value: "database"
  - name: DATABASE_NAME
    displayName: Database Name
    description: The name of the database.
    required: true
    value: "tno"
  - name: DATABASE_USER_KEY_NAME
    displayName: Database User Key Name
    description:
      The datbase user key name stoed in database deployment resources specified
      by DATABASE_DEPLOYMENT_NAME.
    required: true
    value: "PATRONI_SUPERUSER_USERNAME"
  - name: DATABASE_PASSWORD_KEY_NAME
    displayName: Database Password Key Name
    description:
      The database password key name stored in database deployment resources
      specified by DATABASE_DEPLOYMENT_NAME.
    required: true
    value: "PATRONI_SUPERUSER_PASSWORD"
  - name: TABLE_SCHEMA
    displayName: Table Schema
    description: The table schema for your database.  Used for Postgres backups.
    required: true
    value: public
  - name: BACKUP_STRATEGY
    displayName: Backup Strategy
    description: The strategy to use for backups; for example daily, or rolling.
    required: true
    value: "rolling"

  # The following are only required if a ConfigMap isn't provided.
  - name: FTP_URL
    displayName: FTP Server URL
    description: The URL of the backup FTP server
    required: false
    value: ""
  - name: FTP_USER
    displayName: FTP user name
    description: FTP user name
    required: false
    value: ""
  - name: FTP_PASSWORD
    displayName: FTP password
    description: FTP password
    required: false
    value: ""

  - name: WEBHOOK_URL
    displayName: Webhook URL
    description:
      The URL of the webhook to use for notifications.  If not specified,
      the webhook integration feature is disabled.
    required: false
    value: ""
  - name: ENVIRONMENT_FRIENDLY_NAME
    displayName: Friendly Environment Name
    description:
      The human readable name of the environment.  This variable is used
      by the webhook integration to identify the environment in which the backup notifications
      originate.
    required: false
    value: ""
  - name: ENVIRONMENT_NAME
    displayName: Environment Name (Environment Id)
    description:
      The name or Id of the environment.  This variable is used by the webhook
      integration to identify the environment in which the backup notifications originate.
    required: false
    value: ""

  - name: DAILY_BACKUPS
    displayName: Number of Daily Backups to Retain
    description:
      The number of daily backup files to be retained.  Used for the `rolling`
      backup strategy.
    required: false
    value: ""
  - name: WEEKLY_BACKUPS
    displayName: Number of Weekly Backups to Retain
    description:
      The number of weekly backup files to be retained.  Used for the `rolling`
      backup strategy.
    required: false
    value: ""
  - name: MONTHLY_BACKUPS
    displayName: Number of Monthly Backups to Retain
    description:
      The number of monthly backup files to be retained.  Used for the `rolling`
      backup strategy.
    required: false
    value: ""
  - name: BACKUP_PERIOD
    displayName: Period (d,m,s) between backups in a format used by the sleep command
    description:
      Used for backward compatibility only.  Ignored when using the recommended
      `backup.conf` and cron backup strategy.  Period (d,m,s) between backups in a format
      used by the sleep command
    required: false
    value: ""

  - name: BACKUP_DIR
    displayName: The root backup directory
    description:
      The name of the root backup directory.  The backup volume will be mounted
      to this directory.
    required: true
    value: "/backups/"
  - name: NUM_BACKUPS
    displayName: The number of backup files to be retained
    description:
      Used for backward compatibility only.  Ignored when using the recommended
      `rolling` backup strategy.  The number of backup files to be retained.  Used for
      the `daily` backup strategy.
    required: false
    value: ""
  - name: CONFIG_FILE_NAME
    displayName: Config File Name
    description: The name of the configuration file.
    required: true
    value: backup.conf
  - name: CONFIG_MOUNT_PATH
    displayName: Config Mount Path
    description: The path to use to mount the config file.
    required: true
    value: "/"

  - name: VERIFICATION_VOLUME_SIZE
    displayName: Backup Volume Size
    description:
      The size of the persistent volume used for restoring and verifying
      backups, e.g. 512Mi, 1Gi, 2Gi.  Ensure this is sized correctly.  It should be
      large enough to contain your largest database.
    required: true
    value: "1Gi"
  - name: VERIFICATION_VOLUME_CLASS
    displayName: Backup Volume Class
    description:
      The class of the persistent volume used for restoring and verifying
      backups; should be one of netapp-block-standard or netapp-file-standard.  netapp-block-standard
      performs better.
    required: true
    value: "netapp-file-standard"
  - name: VERIFICATION_VOLUME_MOUNT_PATH
    displayName: Verification Volume Mount Path
    description:
      The path on which to mount the verification volume.  This is used by
      the database server to contain the database configuration and data files. For
      Mongo, please use /var/lib/mongodb/data . For MSSQL, please use /var/opt/mssql/data
    required: true
    value: "/var/opt/mssql/data"

  - name: CPU_REQUEST
    displayName: Resources CPU Request
    description: The resources CPU request (in cores) for this build.
    required: true
    value: "50m"
  - name: CPU_LIMIT
    displayName: Resources CPU Limit
    description: The resources CPU limit (in cores) for this build.
    required: true
    value: "500m"
  - name: MEMORY_REQUEST
    displayName: Resources Memory Request
    description: The resources Memory request (in Mi, Gi, etc) for this build.
    required: true
    value: "50Mi"
  - name: MEMORY_LIMIT
    displayName: Resources Memory Limit
    description: The resources Memory limit (in Mi, Gi, etc) for this build.
    required: true
    value: "1Gi"
objects:
  # Allow the backup to communicate with the database.
  - kind: NetworkPolicy
    apiVersion: networking.k8s.io/v1
    metadata:
      name: pod-from-pod-permit-${APP_NAME}-${GROUP_NAME}-${DATABASE_GROUP_NAME}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
    spec:
      #description: Allow database pod(s) to receive communication from backup pod(s).
      podSelector:
        matchLabels:
          app: ${APP_NAME}
          role: ${DATABASE_GROUP_NAME}
          env: ${ENV_NAME}
      ingress:
        - from:
            - podSelector:
                matchLabels:
                  app: ${APP_NAME}
                  role: ${GROUP_NAME}
                  env: ${ENV_NAME}

  # Configuration settings for cronjob.
  - kind: ConfigMap
    apiVersion: v1
    metadata:
      name: ${APP_NAME}-${GROUP_NAME}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      labels:
        name: ${APP_NAME}-${GROUP_NAME}
        app: ${APP_NAME}
        role: ${GROUP_NAME}
        env: ${ENV_NAME}
    data:
      backup.conf: "0 1 * * * default ./backup.sh -s\npostgres=${APP_NAME}-${DATABASE_GROUP_NAME}:5432/${DATABASE_NAME}"

  # Backup configuration settings.
  - kind: ConfigMap
    apiVersion: v1
    metadata:
      name: ${APP_NAME}-${GROUP_NAME}-settings
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      annotations:
        description: "Backup configuration settings"
      labels:
        name: ${APP_NAME}-${GROUP_NAME}-settings
        app: ${APP_NAME}
        role: ${GROUP_NAME}
        env: ${ENV_NAME}
    type: Opaque
    data:
      webhook-url: ${WEBHOOK_URL}
      ftp-url: ${FTP_URL}
      ftp-user: ${FTP_USER}
      ftp-password: ${FTP_PASSWORD}

  # Storage for verification of backup.
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: ${APP_NAME}-${GROUP_NAME}-verification
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      labels:
        name: ${APP_NAME}-${GROUP_NAME}-verification
        app: ${APP_NAME}
        role: ${GROUP_NAME}
        env: ${ENV_NAME}
    spec:
      storageClassName: ${VERIFICATION_VOLUME_CLASS}
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: ${VERIFICATION_VOLUME_SIZE}

  # How to deploy to the pod.
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: ${APP_NAME}-${GROUP_NAME}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      labels:
        name: ${APP_NAME}-${GROUP_NAME}
        app: ${APP_NAME}
        env: ${ENV_NAME}
        role: ${GROUP_NAME}
      annotations:
        description: Defines how to deploy the ${APP_NAME}-${GROUP_NAME} server
    spec:
      strategy:
        type: Recreate
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - ${APP_NAME}-${GROUP_NAME}
            from:
              kind: ImageStreamTag
              namespace: ${PROJECT_NAMESPACE}-tools
              name: ${APP_NAME}-${GROUP_NAME}:${IMAGE_TAG}
      replicas: 1
      selector:
        app: ${APP_NAME}
        env: ${ENV_NAME}
        role: ${GROUP_NAME}
      template:
        metadata:
          name: ${APP_NAME}-${GROUP_NAME}
          labels:
            name: ${APP_NAME}-${GROUP_NAME}
            app: ${APP_NAME}
            env: ${ENV_NAME}
            role: ${GROUP_NAME}
        spec:
          volumes:
            # This volume will need to be created by the database deployment configuration.
            - name: ${APP_NAME}-${DATABASE_GROUP_NAME}-${GROUP_NAME}
              persistentVolumeClaim:
                claimName: ${APP_NAME}-${DATABASE_GROUP_NAME}-${GROUP_NAME}
            - name: ${APP_NAME}-${GROUP_NAME}-verification
              persistentVolumeClaim:
                claimName: ${APP_NAME}-${GROUP_NAME}-verification
            - name: ${APP_NAME}-${GROUP_NAME}-config
              configMap:
                name: ${APP_NAME}-${GROUP_NAME}
                items:
                  - key: ${CONFIG_FILE_NAME}
                    path: ${CONFIG_FILE_NAME}
          containers:
            - name: ${APP_NAME}-${GROUP_NAME}
              image: ""
              ports: []
              env:
                - name: BACKUP_STRATEGY
                  value: ${BACKUP_STRATEGY}
                - name: BACKUP_DIR
                  value: ${BACKUP_DIR}
                - name: NUM_BACKUPS
                  value: ${NUM_BACKUPS}
                - name: DAILY_BACKUPS
                  value: ${DAILY_BACKUPS}
                - name: WEEKLY_BACKUPS
                  value: ${WEEKLY_BACKUPS}
                - name: MONTHLY_BACKUPS
                  value: ${MONTHLY_BACKUPS}
                - name: BACKUP_PERIOD
                  value: ${BACKUP_PERIOD}
                - name: DATABASE_SERVICE_NAME
                  value: ${APP_NAME}-${DATABASE_GROUP_NAME}
                - name: DATABASE_NAME
                  value: ${DATABASE_NAME}
                - name: TABLE_SCHEMA
                  value: ${TABLE_SCHEMA}
                - name: DATABASE_USER
                  valueFrom:
                    secretKeyRef:
                      name: ${APP_NAME}-${DATABASE_GROUP_NAME}
                      key: ${DATABASE_USER_KEY_NAME}
                - name: DATABASE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${APP_NAME}-${DATABASE_GROUP_NAME}
                      key: ${DATABASE_PASSWORD_KEY_NAME}
                - name: FTP_URL
                  valueFrom:
                    configMapKeyRef:
                      name: ${APP_NAME}-${GROUP_NAME}-settings
                      key: ftp-url
                - name: FTP_USER
                  valueFrom:
                    configMapKeyRef:
                      name: ${APP_NAME}-${GROUP_NAME}-settings
                      key: ftp-user
                - name: FTP_PASSWORD
                  valueFrom:
                    configMapKeyRef:
                      name: ${APP_NAME}-${GROUP_NAME}-settings
                      key: ftp-password
                - name: WEBHOOK_URL
                  valueFrom:
                    configMapKeyRef:
                      name: ${APP_NAME}-${GROUP_NAME}-settings
                      key: webhook-url
                - name: ENVIRONMENT_FRIENDLY_NAME
                  value: "${ENVIRONMENT_FRIENDLY_NAME}"
                - name: ENVIRONMENT_NAME
                  value: "${ENVIRONMENT_NAME}"
              resources:
                requests:
                  cpu: ${CPU_REQUEST}
                  memory: ${MEMORY_REQUEST}
                limits:
                  cpu: ${CPU_LIMIT}
                  memory: ${MEMORY_LIMIT}
              volumeMounts:
                - name: ${APP_NAME}-${DATABASE_GROUP_NAME}-${GROUP_NAME}
                  mountPath: ${BACKUP_DIR}
                - name: ${APP_NAME}-${GROUP_NAME}-verification
                  mountPath: ${VERIFICATION_VOLUME_MOUNT_PATH}
                - name: ${APP_NAME}-${GROUP_NAME}-config
                  mountPath: ${CONFIG_MOUNT_PATH}${CONFIG_FILE_NAME}
                  subPath: ${CONFIG_FILE_NAME}
